# Classes
	1.1 Window Class
	1.2 Text Class
	1.3 Btn Class
	1.4 Settings Class
	1.5 Game Class
		1.5.1 Block Class
		1.5.2 Rectangle Class
		1.5.3 LBlock Class
		1.5.4 SquareBlock Class
		1.5.5 TBlock Class
		1.5.6 SBlock Class
		1.5.7 ZBlock Class
		1.5.8 LineBlock Class
		1.5.9 JBlock Class
	1.6 GridRect Class
	1.7 Grid Class
	1.8 Highscore Class

# Solo Files
	2.1 Main
	2.2 Home
	2.3 Instructions
	2.4 Settings
	2.5 Game
	2.6 ScoreInput
	2.7 Highscore

# Utilities
	3.1 ClrTerminal

1. Classes

	1.1 Window Class
		1.1.1 CLASS Window IS {TUPLE screen_size, STRING window_title, TUPLE bg_color}:
		1.1.2 	
		1.1.3	METHODS
		1.1.4
		1.1.5		CONSTRUCTOR(THIS, STRING window_title, TUPLE bg_color)
		1.1.6 			# Initialisation for the Window Class
		1.1.7			DECLARE THIS.screen_size INITIALLY (960, 720)
		1.1.8 			DECLARE THIS.window_title INITIALLY window_title
		1.1.9			DECLARE THIS.bg_color INITIALLY bg_color
		1.1.10		END CONSTRUCTOR
		1.1.11
		1.1.12		PROCEDURE CreateNewWindow(THIS) RETURNS NONE
		1.1.13			DECLARE THIS.win = pygame.display.set_mode(size=self.window_size) # Set Window Size
		1.1.14			THIS.win.fill(THIS.bg_color) # Set Background Color
		1.1.15				pygame.display.set_caption(self.window_title) # Set Window Title
		1.1.16				pygame.display.flip() # Used to Show Background Color
		1.1.17			END PROCEDURE
		1.1.18
		1.1.19
		1.1.20
		1.1.21		<@staticmethod>
		1.1.22		PROCEDURE ExitWindow(THIS) RETURNS NONE
		1.1.23			pygame.display.quit()
		1.1.24			Color.printd('Exiting Window...')
		1.1.25			pygame.quit()
		1.1.26			quit(0)
		1.1.27		END PROCEDURE
		1.1.28
		1.1.29		PROCEDURE drawGUIObjs(THIS, LIST GUIObjects INITIALLY NONE) RETURNS NONE
		1.1.30			IF GUIObjects == None THEN PASS 
		1.1.31			ELSE
		1.1.32				FOR EACH GUIObj IN GUIObjects DO
		1.1.33					<match GUIObj type> # Check if the object in the list is a render-able object
		1.1.34						<type Text> GUIObj.RenderText() # If Object in list is text, render text
		1.1.35						<type Btn> GUIObj.RenderBtn() # If Object in list is a button, render button
		1.1.36						<type default> PASS # Defaults to this if all other cases = False
		1.1.37				END FOR
		1.1.38			END IF
		1.1.39			pygame.display.flip()
		1.1.40
		1.1.41		END PROCEDURE
		1.1.42
		1.1.43		<@staticmethod>
		1.1.44		PROCEDURE Leave RETURNS NONE
		1.1.45			<from .home import run>
		1.1.46			run()
		1.1.47 END CLASS

	1.2 Text Class
		1.2.1 CLASS Text INHERITS pygame.sprite.Sprite WITH {ARRAY OF INTEGER pos, STRING text, INTEGER fontsize, TUPLE color}
		1.2.2	
		1.2.3	METHODS
		1.2.4
		1.2.5		CONSTRUCTOR(THIS, ARRAY OF INTEGER pos INITIALLY [0, 0], STRING text INITIALLY 'Text', INTEGER fontsize INITIALLY 20, TUPLE color INITIALLY (255, 255, 255))
		1.2.6			# Initialisation of the Text Class
		1.2.7			IF NOT pygame.font.get_init THEN pygame.font.init() END IF # Initialise font
		1.2.7			DECLARE THIS.surface INITIALLY pygame.display.get_surface() # Get Window Surface
		1.2.8			DECLARE THIS.givenPos INITIALLY pos # Give Position of Text
		1.2.9			DECLARE THIS.color INITIALLY color
		1.2.10			DECLARE THIS.fontsize INITIALLY fontsize
		1.2.11			DECLARE THIS.text INITIALLY pygame.font.Font('src/resources/fonts/font.ttf', THIS.fontsize).render(text, FALSE, THIS.color) # Creates Font
		1.2.12			DECLARE THIS.pos INITIALLY [THIS.givenPos[0] - (THIS.text.get_width() // 2), THIS.givenPos[1] - (THIS.text.get_height() // 2)]
		1.2.13			DECLARE THIS.caption INITIALLY text
		1.2.14		END CONSTRUCTOR
		1.2.15
		1.2.16		PROCEDURE RenderText(THIS) RETURNS NONE
		1.2.17			pygame.display.get_surface().blit(THIS.text, THIS.pos)
		1.2.18			pygame.display.flip()
		1.2.19		END PROCEDURE
		1.2.20
		1.2.21		PROCEDURE ChangeText(THIS, STRING text, PROCEDURE draw) RETURNS NONE
		1.2.22			SET THIS.text AS pygame.font.Font('src/resources/fonts/font.ttf', THIS.fontsize).render(text, FALSE, THIS.COLOR) # Sets New Text
		1.2.23			SET THIS.pos AS ARRAY [THIS.givenPos[0] - (THIS.text.get_width() // 2), THIS.givenPos[1] - (THIS.text.get_height() // 2)]
		1.2.24			draw() IF draw IS NOT NONE ELSE self.RenderText() END IF
		1.2.25		END PROCEDURE
		1.2.26
		1.2.27		PROCEDURE ChangeColor(THIS, TUPLE color) RETURNS NONE
		1.2.28			SET THIS.color AS color
		1.2.29			SET THIS.text AS pygame.font.Font('src/resources/fonts/font.ttf', THIS.fontsize).render(THIS.caption, FALSE, color)
		1.2.30			SET THIS.pos AS [self.givenPos[0] - (self.text.get_width() // 2), self.givenPos[1] - (self.text.get_height() // 2)] # update position
		1.2.31			THIS.RenderText()
		1.2.32		END PROCEDURE
		1.2.33
		1.2.34		PROCEDURE UpdateText(THIS, TUPLE color INITIALLY (255, 255, 255), STRING text INITIALLY '') RETURNS NONE
		1.2.35			THIS.ChangeColor(color)
		1.3.36			THIS.ChangeText(text)
		1.3.37			THIS.ChangeColor((255, 255, 255))
		1.3.38		END PROCEDURE
		1.2.39
		1.2.40		FUNCTION __name__(THIS) RETURNS STRING
		1.2.41			RETURN 'Text'
		1.2.42		END FUNCTION
		1.2.43		
		1.2.44		FUNCTION ReturnText(THIS) RETURNS STRING
		1.2.45			return THIS.caption
		1.2.46		END FUNCTION
		1.2.47 END CLASS

	1.3 Btn Class
		1.3.1 CLASS Btn INHERITS pygame.sprite.Sprite WITH {STRING text, ARRAY OF INTEGER pos, INTEGER width, INTEGER height, INTEGER fontsize}
		1.3.2
		1.3.3 	METHODS
		1.3.4
		1.3.5		CONSTRUCTOR(THIS, STRING text, ARRAY OF INTEGER pos INITIALLY [0, 0], INTEGER width INITIALLY 113, INTEGER height INITIALLY 41, INTEGER fontsize INITIALLY 16)
		1.3.6			DECLARE THIS.pos INITIALLY pos
		1.3.7			DECLARE THIS.surf INITIALLY pygame.display.get_surface() # Get Window Surface
		1.3.8			DECLARE THIS.face = pygame.Rect(THIS.pos, (width, height)) # Create Rect
		1.3.9			DECLARE THIS.face.center INITIALLY THIS.pos
		1.3.10			DECLARE THIS.hovering INITIALLY FALSE # Checks if button is being hovered
		1.3.11			DECLARE THIS.fontsize INITIALLY fontsize
		1.3.12			DECLARE THIS.textColor INITIALLY TUPLE (255, 255, 255)
		1.3.13			DECLARE THIS.text INITIALLY Text(THIS.pos, text, THIS.fontsize, THIS.textColor)
		1.3.14			DECLARE THIS.caption INITIALLY text
		1.3.15			DECLARE THIS.state INITIALLY FALSE
		1.3.16			DECLARE THIS.hoverSound INITIALLY 'src/resources/sounds/hoverSound.wav'
		1.3.17			DECLARE THIS.selectSound INITIALLY 'src/resources/sounds/selectSound.wav'
		1.3.18		END CONSTRUCTOR
		1.3.19
		1.3.20
		1.3.21		PROCEDURE ChangeState(THIS, STRING txt, BOOLEAN bool) RETURNS NONE
		1.3.22			SET THIS.state AS bool
		1.3.23			THIS.text.ChangeText(txt, THIS.RenderBtn)
		1.3.24		END PROCEDURE
		1.3.25
		1.3.26		PROCEDURE isHovering(THIS, PROCEDURE click, BOOLEAN effectState, TUPLE color INITIALLY (255, 0, 0), TUPLE *args) RETURNS NONE # If mouse is hovering
		1.3.27			# Checks to see if the mouse is hovering over a button
		1.3.28			IF THIS.face.collidepoint(pygame.mouse.get_pos()) THEN # If the button is not already being hovered
		1.3.29				IF NOT THIS.hovering # Sets button being hovered to true
		1.3.30					SET THIS.hovering AS TRUE
		1.3.31					THIS.text.ChangeColor(color)
		1.3.32					pygame.mixer.Channel(0).set_volume(.3) IF effectState ELSE pygame.mixer.Channel(0).set_volume(0) END IF
        1.3.33   				pygame.mixer.Channel(0).play(pygame.mixer.Sound(self.hoverSound)) IF effectState E:SE pygame.mixer.Channel(0).set_volume(0) END IF
		1.3.34					THIS.RenderBtn()
		1.3.35
		1.3.36				ELSE # If the button is already being hovered
		1.3.37					THIS.HasClicked(click, *args) # Check if the button has been clicked
		1.3.38				END IF
		1.3.39
		1.3.40			# If mouse is not over the button but the button is still being hovered    
		1.3.41			ELSE IF NOT THIS.face.collidepoint(pygame.mouse.get_pos()) AND THIS.hovering THEN
		1.3.42				SET THIS.hovering AS FALSE
		1.3.43				SET THIS.text.ChangeColor((255, 255, 255))
		1.3.44				THIS.RenderBtn()
		1.3.45			END IF
		1.3.46
		1.3.47		PROCEDURE HasClicked(THIS, PROCEDURE click, TUPLE *args) RETURNS NONE
		1.3.48			# Check if a button has been clicked
		1.3.49			IF pygame.mouse.get_pressed()[0] THEN
		1.3.50				pygame.mixer.Channel(0).play(pygame.mixer.Sound(THIS.selectSound))
		1.3.51				click() IF NOT args ELSE click(args) END IF
		1.3.52				time.sleep(.3) # Stop multiple clicks being allowed
		1.3.53			END IF
		1.3.54			
		1.3.55		PROCEDURE RenderBtn(THIS) RETURNS NONE
		1.3.56			pygame.draw.rect(pygame.display.get_surface(), (0, 0, 0), THIS.face)
		1.3.57			THIS.text.RenderText()
		1.3.58		END PROCEDURE
		1.3.59
		1.3.60		FUNCTION __name__(THIS) RETURNS STRING
		1.3.61			RETURN 'Btn' # Returns name of class (Button)
		1.3.62		END FUNCTION

	1.4 Settings Class
		1.4.1 CLASS Settings IS {}
		1.4.2	# Class for Game Settings
		1.4.3	METHODS
		1.4.4	
		1.4.5		CONSTRUCTOR(THIS, BOOLEAN musicState INITIALLY TRUE, BOOLEAN effectState INITIALLY TRUE)
		1.4.6			DECLARE THIS.musicState INITIALLY musicState
		1.4.7			DECLARE THIS.effectState INITIALLY effectState
		1.4.8			DECLARE THIS.filePath INITIALLY 'Implementation/settings.txt'
		1.4.9		END CONSTRUCTOR
		1.4.10
		1.4.11		PROCEDURE init(THIS) RETURNS NONE
		1.4.12			# Gets Settings from File
		1.4.13			IF NOT os.path.isfile(THIS.filePath) DO self.WriteSettings(False) # If there is no settings file, make one
		1.4.14			
		1.4.15			ELSE # Otherwise
		1.4.16				<open settings file as f> # Open the file
		1.4.17					DECLARE settings INITIALLY ARRAY OF STRING f.read().split(',') # Split values by comma
		1.4.18					f.close() # Close file
		1.4.19			
		1.4.20				SET THIS.musicState AS TRUE IF settings[0] == 'True' ELSE FALSE END IF
		1.4.21				SET THIS.effectState AS TRUE IF settings[0] == 'True' ELSE FALSE END IF
		1.4.22		END PROCEDURE
		1.4.23
		1.4.24		PROCEDURE WriteSettings(THIS, BOOLEAN rem) RETURNS NONE
		1.4.25			IF rem DO remove('settings.txt')
		1.4.26			
		1.4.27			<open filePath in write mode as f>
		1.4.28				f.write(f'{str(THIS.musicState)}')
		1.4.29				f.write(f'{str(THIS>effectState)}')
		1.4.30				f.close()
		1.4.31			THIS.init()
		1.4.32		END PROCEDURE
		1.4.33
		1.4.34		PROCEDURE ChangeSettings(THIS, BOOLEAN musicBool INITIALLY NONE, BOOLEAN effectsBool INITIALLY NONE) RETURNS NONE
		1.4.35			SET THIS.musicState AS musicBool IF musicBool != NONE ELSE THIS.musicState END IF
		1.4.36			SET THIS.effectState AS effectsBool IF effectsBool != NONE ELSE THIS.effectState
		1.4.37			THIS.WriteSettings(True)
		1.4.38		END PROCEDURE
		1.4.39
		1.4.40		FUNCTION ReturnStates(THIS) RETURNS STRING
		1.4.41			RETURN f'Music: {THIS.musicState}\nEffects: {THIS.effectState}'
		1.4.42		END FUNCTION
		1.4.43	END CLASS

	1.5 Game Class
		1.5.1 Block Class
			1.5.1.1 CLASS BLOCK INHERITS pygame.sprite.Sprite WITH {TUPLE OF TUPLES struct, TUPLE color}
			1.5.1.2 	<@staticmethod>
			1.5.1.3 	FUNCTION GetRandBlock() RETURNS Game.<random block variation>
			1.5.1.4			RETURN choice((Game.LBlock, Game.SquareBlock, Game.TBlock, Game.SBlock, Game.ZBlock, Game.LineBlock))()
			1.5.1.5 	END FUNCTION
			1.5.1.6		
			1.5.1.7		METHODS
			1.5.1.8			CONSTRUCTOR(THIS, TUPLE OF TUPLES struct, TUPLE color)
			1.5.1.9				DECLARE THIS.struct INITIALLY struct
			1.5.1.10			DECLARE THIS.color INITIALLY color
			1.5.1.11			DECLARE THIS.realPos INITIALLY [450, 100]
			1.5.1.12			DECLARE THIS.blockSize INITIALLY 30
			1.5.1.13			DECLARE THIS.group INITIALLY pygame.sprite.Group()
			1.5.1.14		END CONSTRUCTOR
			1.5.1.15
			1.5.1.16		PROCEDURE draw(THIS, SURFACE screen) RETURNS NONE
			1.5.1.17			DECLARE posX, posY INITIALLY THIS.realPos
			1.5.1.18			
			1.5.1.19			FOR y IN RANGE(LENGTH THIS.struct) DO
			1.5.1.20				FOR x IN RANGE(LENGTH THIS.struct[y]) DO
			1.5.1.21					IF y > 0 AND x == 0 THEN 
			1.5.1.22						SET posY TO posY + 30
			1.5.1.23						SET posX TO posX - (30*3)
			1.5.1.24					END IF
			1.5.1.25
			1.5.1.26					IF THIS.struct[y][x] == 1 THEN
			1.5.1.27						THIS.group.add(Game.Rectangle((posX, posY), THIS.color, THIS.blockSize))
			1.5.1.28						SET posX TO posX + 30
			1.5.1.29
			1.5.1.30					ELSE SET posX TO posX + 30
			1.5.1.31					END IF
			1.5.1.32				END FOR
			1.5.1.33			END FOR
			1.5.1.34			THIS.group.draw(screen)
			1.5.1.35		END PROCEDURE
			1.5.1.36	
			1.5.1.37		PROCEDURE Move(THIS, SURFACE screen, STRING dir, STRING dirName) RETURNS NONE
			1.5.1.38			THIS.UpdateColor((0, 0, 0), screen)
			1.5.1.39			THIS.group.empty()
			1.5.1.40			pygame.display.update()
			1.5.1.41			<match dirName>
			1.5.1.42				<dirName is 'left'> SET THIS.realPos[0] TO THIS.realPos[0] - 30
			1.5.1.43				<dirName is 'right'> SET THIS.realPos[0] TO THIS.realPos[0] + 30
			1.5.1.44				<dirName is 'down'> SET THIS.realPos[1] TO THIS.realPos[1] + 30
			1.5.1.45
			1.5.1.46			Game.Block.draw(THIS, win.ReturnWindowSurface())
			1.5.1.47		END PROCEDURE
			1.5.1.48
			1.5.1.49		FUNCTION CheckCollision(THIS, GROUP blockGroup) RETURNS BOOLEAN
			1.5.1.50			FOR i IN RANGE(LENGTH blockGroup.sprites()) DO
			1.5.1.51				IF self == blockGroup.sprites()[i] THEN CONTINUE
			1.5.1.52				ELSE
			1.5.1.53					FOR j IN RANGE(LENGTH THIS.group.sprites()) DO
			1.5.1.54						IF Game.Block.WillCollide(THIS.group.sprites()[j], blockGroup.sprites()[i].group) THEN RETURN TRUE END IF
			1.5.1.55					END FOR
			1.5.1.56				END IF
			1.5.1.57			END FOR
			1.5.1.58			
			1.5.1.59			FOR i IN RANGE(LENGTH THIS.group.sprites()) DO
			1.5.1.60				IF THIS.group.sprites()[i].posY == 670 THEN RETURN TRUE END IF
			1.5.1.61			END FOR
			1.5.1.62			
			1.5.1.63			RETURN FALSE
			1.5.1.64		END FUNCTION
			1.5.1.65
			1.5.1.66		<@staticmethod>
			1.5.1.66		FUNCTION WillCollide(SPRITE sprite, GROUP group) RETURNS BOOL
			1.5.1.67			<import copy>
			1.5.1.68			DECLARE spriteRect INITIALLY copy.copy(sprite.rect)
			1.5.1.69			spriteRect.move_ip((0, 30))
			1.5.1.70
			1.5.1.71			FOR i IN RANGE(LENGTH group) DO
			1.5.1.72				IF spriteRect.colliderect(group.sprites()[i].rect) THEN RETURN TRUE END IF
			1.5.1.73			END FOR
			1.5.1.74			
			1.5.1.75			RETURN FALSE
			1.5.1.76		END FUNCTION
			1.5.1.77
			1.5.1.78		FUNCTION CheckMovable(THIS, STRING dir)
			1.5.1.79			IF dir == 'right' THEN 
			1.5.1.80				FOR i IN RANGE(LENGTH THIS.group.sprites()) DO
			1.5.1.81					IF THIS.group.sprites()[i].posX == 600 THEN RETURN TRUE END IF
			1.5.1.82				END FOR
			1.5.1.83				
			1.5.1.84				RETURN FALSE
			1.5.1.85			END IF
			1.5.1.86
			1.5.1.87			IF dir == 'left' THEN
			1.5.1.88				FOR i IN RANGE(LENGTH THIS.group.sprites()) DO
			1.5.1.89					IF THIS.group.sprites()[i].posX == 360 THEN RETURN TRUE END IF
			1.5.1.90				END FOR
			1.5.1.91				
			1.5.1.92				RETURN FALSE
			1.5.1.93			END IF
			1.5.1.94		END FUNCTION
			1.5.1.95		
			1.5.1.96		PROCEDURE UpdateColor(THIS, TUPLE color, SURFACE screen) RETURNS NONE
			1.5.1.97			DECLARE originalColor INITIALLY THIS.color
			1.5.1.98			SET THIS.color TO color
			1.5.1.99			THIS.draw(screen)
			1.5.1.100			SET THIS.color TO originalColor
			1.5.1.101		END PROCEDURE
			1.5.1.102
			1.5.1.103		PROCEDURE Rotate(THIS, SURFACE screen, BOOL effectState, SOUND sound)
			1.5.1.104			IF NOT isinstance(THIS, Game.SquareBlock) THEN
			1.5.1.105				IF effectState THEN pygame.mixer.Channel(0).play(sound) END IF
			1.5.1.106				THIS.UpdateColor((0, 0, 0), screen)
			1.5.1.107				
			1.5.1.108				<from numpy import rot90>
			1.5.1.109				THIS.struct = rot90(THIS.struct)
			1.5.1.110				THIS.draw(screen)
			1.5.1.111			END IF
			1.5.1.112		END PROCEDURE
			1.5.1.113
			1.5.1.114		<@staticmethod>
			1.5.1.115		FUNCTION reachedTop(GROUP blockGroup) RETURNS BOOL
			1.5.1.116			FOR EACH sprite IN blockGroup DO
			1.5.1.117				FOR EACH block IN sprite.group DO
			1.5.1.118					IF block.posY == 130 THEN RETURN TRUE END IF
			1.5.1.119				END FOR
			1.5.1.120			END FOR
			1.5.1.121			
			1.5.1.122			RETURN FALSE
			1.5.1.123		END FUNCTION
			1.5.1.124	END CLASS

		1.5.2 Rectangle Class
			1.5.2.1 CLASS RECTANGLE INHERITS pygame.sprite.Sprite WITH {TUPLE pos, TUPLE color, INTEGER size}
			1.5.2.2		CONSTRUCTOR(THIS, TUPLE pos, TUPLE color, INTEGER size)
			1.5.2.3			DECLARE THIS.posX, THIS.posY INITIALLY pos
			1.5.2.4			DECLARE THIS.size INITIALLY size
			1.5.2.5			DECLARE THIS.color INITIALLY color
			1.5.2.6			DECLARE THIS.rect INITIALLY pygame.Rect(THIS.posX, THIS.posY, THIS.size, THIS.size)
			1.5.2.7			DECLARE THIS.image INITIALLY pygame.Surface([THIS.size, THIS.size])
			1.5.2.8			THIS.image.fill(THIS.color)
			1.5.2.9		END CONSTRUCTOR
			1.5.2.10
			1.5.2.11	METHODS
			1.5.2.12
			1.5.2.13		PROCEDURE update(THIS, TUPLE dir) RETURNS NONE
			1.5.2.14			THIS.rect.move_ip(dir)
			1.5.2.15		END PROCEDURE
			1.5.2.16
			1.5.2.17 	END CLASS

		1.5.3 LBlock Class
			1.5.3.1 CLASS LBlock INHERITS Block
			1.5.3.2		CONSTRUCTOR(THIS)
			1.5.3.3			<super().__init__(((0, 0, 0), (1, 0, 0), (1, 1, 1)), (255, 165, 0))>
			1.5.3.4 	END CONSTRUCTOR
			1.5.3.5 END CLASS

		1.5.4 SquareBlock Class
			1.5.4.1 CLASS SquareBlock INHERITS Block
			1.5.4.2		CONSTRUCTOR(THIS)
			1.5.4.3			<super().__init__(((0, 0, 0), (1, 1, 0), (1, 1, 0)), (255, 255, 0))>
			1.5.4.4 	END CONSTRUCTOR
			1.5.4.5 END CLASS

		1.5.5 TBlock Class
			1.5.5.1 CLASS TBlock INHERITS Block
			1.5.5.2		CONSTRUCTOR(THIS)
			1.5.5.3			<super().__init__(((0, 0, 0), (0, 1, 0), (1, 1, 1)), (128, 0, 128))>
			1.5.5.4 	END CONSTRUCTOR
			1.5.5.5 END CLASS

		1.5.6 SBlock Class
			1.5.6.1 CLASS SBlock INHERITS Block
			1.5.6.2		CONSTRUCTOR(THIS)
			1.5.6.3			<super().__init__(((0, 0, 0), (0, 1, 1), (1, 1, 0)), (0, 128, 0))>
			1.5.6.4 	END CONSTRUCTOR
			1.5.6.5 END CLASS

		1.5.7 ZBlock Class
			1.5.7.1 CLASS ZBlock INHERITS Block
			1.5.7.2		CONSTRUCTOR(THIS)
			1.5.7.3			<super().__init__(((0, 0, 0), (1, 1, 0), (0, 1, 1)), (128, 0, 0))>
			1.5.7.4 	END CONSTRUCTOR
			1.5.7.5 END CLASS

		1.5.8 LineBlock Class
			1.5.9.1 CLASS LineBlock INHERITS Block
			1.5.9.2		CONSTRUCTOR(THIS)
			1.5.9.3			<super().__init__(((0, 0, 0, 0), (1, 1, 1, 1), (0, 0, 0, 0)), (0, 255, 255))>
			1.5.9.4 	END CONSTRUCTOR
			1.5.9.5 END CLASS

		1.5.9 JBlock Class
			1.5.9.1 CLASS JBlock INHERITS Block
			1.5.9.2		CONSTRUCTOR(THIS)
			1.5.9.3			<super().__init__(((0, 0, 0), (0, 0, 1), (1, 1, 1)), (0, 0, 255))>
			1.5.9.4 	END CONSTRUCTOR
			1.5.9.5 END CLASS

	1.6 GridRect Class
		1.6.1 CLASS GridRect INHERITS pygame.sprite.Sprite WITH {TUPLE pos, INTEGER size}
		1.6.2 		CONSTRUCTOR(THIS, TUPLE pos, INTEGER size)
		1.6.3			DECLARE THIS.posX, THIS.posY INITIALLY pos
		1.6.4			DECLARE THIS.size INITIALLY size
		1.6.5			DECLARE THIS.color INITIALLY (200, 200, 200)
		1.6.6			DECLARE THIS.rect INITIALLY pygame.Rect(THIS.posX, THIS.posY, THIS.size, THIS.size)
		1.6.7			DECLARE THIS.image INITIALLY pygame.Surface([THIS.size, THIS.size])
		1.6.7		END CONSTRUCTOR
		1.6.8		
		1.6.9		PROCEDURE drawRect(THIS, SURFACE screen) RETURNS NONE
		1.6.10			pygame.draw.rect(screen, THIS.color, THIS.rect, 1)
		1.6.11		END PROCEDURE
		1.6.12	END CLASS

	1.7 Grid Class
		1.7.1 CLASS Grid INHERITS Game WITH {TUPLE gridSize}
		1.7.2		CONSTRUCTOR(THIS, TUPLE gridPos, TUPLE totalGridSize INITIALLY (630, 700))
		1.7.3			DECLARE THIS.posX, THIS.posY INITIALLY gridPos
		1.7.4			DECLARE THIS.blockSize INITIALLY 30
		1.7.5			DECLARE THIS.gridX, THIS.gridY INITIALLY totalGridSize
		1.7.6			DECLARE THIS.gridGroup INITIALLY pygame.sprite.Group()
		1.7.7		END CONSTRUCTOR
		1.7.8
		1.7.9		PROCEDURE DrawGrid(THIS, SURFACE screen) RETURNS NONE
		1.7.10			FOR x IN RANGE(THIS.posX, THIS.gridX, THIS.blockSize) DO
		1.7.11				FOR y IN RANGE(THIS.posY, THIS.gridY, THIS.blockSize) DO
		1.7.12					DECLARE gridBlock INITIALLY GridRect((x, y), THIS.blockSize)
		1.7.13					THIS.gridGroup.add(gridBlock)
		1.7.14					gridBlock.drawRect(screen)
		1.7.15				END FOR
		1.7.16			END FOR
		1.7.17		END PROCEDURE
		1.7.18 END CLASS

	1.8 Highscore Class
		1.8.1 CLASS Highscore IS {}
		1.8.2		CONSTRUCTOR(STRING name INITIALLY 'PLA', INTEGER score INITIALLY 0)
		1.8.3			DECLARE self.name INITIALLY name
		1.8.4			DECLARE self.score INITIALLY score
		1.8.5		END CONSTRUCTOR
		1.8.6
		1.8.7 		METHODS
		1.8.8	
		1.8.9			FUNCTION BubbleSortScores(THIS, LIST scoresList, BOOLEAN dev INITIALLY TRUE) RETURNS LIST OF LISTS
		1.8.10				IF THIS.name != 'PLA' AND THIS.score != 0 THEN: scoresList.append(Highscore(THIS.name, THIS.score)) END IF
		1.8.11				
		1.8.12				FOR i IN RANGE(LENGTH scoresList) DO
		1.8.13					FOR j IN RANGE(LENGTH scoresList - i - 1) DO
		1.8.14						IF scoresList[j+1].score > scoresList[j].score THEN
		1.8.15							SET scoresList[j], scoresList[j+1] TO scoresList[j+1], scoresList[j]
		1.8.16						END IF
		1.8.17					END FOR
		1.8.18				END FOR
		1.8.19
		1.8.20				RETURN [[score.name, score.score] FOR EACH score IN scoreList[:5] END FOR] IF NOT dev ELSE [[score.name, score.score] FOR EACH score IN scoreList END FOR] END IF
		1.8.21			END FUNCTION
		1.8.22
		1.8.23			<@staticmethod>
		1.8.24			FUNCTION GetScoresFromFile(STRING filePath) RETURNS LIST
		1.8.25				TRY
		1.8.26					<open score file as f>
		1.8.27						DECLARE data INITIALLY f.read().split(',')
		1.8.28					
		1.8.29					DECLARE names, scores INITIALLY [], []
		1.8.30				
		1.8.31					FOR EACH value IN data DO
		1.8.32						TRY
		1.8.33							scores.append(int(value))
		1.8.34						EXCEPT ValueError:
		1.8.35							names.append(value)
		1.8.36					END FOR
		1.8.37					
		1.8.38					DECLARE highscores INITIALLY [Highscore(name, score) FOR EACH name, score IN zip(names, scores) END FOR]
		1.8.39
		1.8.40					Color.prints(f'Successfully Retrieved Score data from {filePath}')
		1.8.41					RETURN highscores
		1.8.42
		1.8.43				EXCEPT Exception as e
		1.8.44					Color.printe(f'Unexpected Error Occurred during data retrieval\n{e}')
		1.8.45					RETURN []
		1.8.46				END TRY
		1.8.47			END FUNCTION
		1.8.48
		1.8.49			<@staticmethod>
		1.8.50			FUNCTION WriteScoresToFile(STRING filePath, LIST scores) RETURNS LIST
		1.8.51				TRY
		1.8.52					<open score file as f>
		1.8.53 						FOR EACH score IN scores DO f.write(f'{score.name},{score.score},') END FOR
		1.8.54						
		1.8.55					Color.prints(f'Successfully written scores to {filePath}')
		1.8.56					RETURN TRUE
		1.8.57				EXCEPT Exception as e
		1.8.58					Color.printe(f'Unexpected Error occurred whilst writing scores to {filePath}\n{e}')
		1.8.59					RETURN FALSE
		1.8.60				END TRY
		1.8.61			END FUNCTION
		1.8.62
		1.8.63			<@staticmethod>
		1.8.64 			FUNCTION CommitToDb(LIST scores) RETURNS LIST OF TUPLES
		1.8.65				DECLARE topScores INITIALLY []
		1.8.66				SET scores TO scores[0]
		1.8.67
		1.8.68				TRY
		1.8.69					DECLARE conn_str INITIALLY f'''DRIVER=SQL SERVER;SERVER={SERVER_NAME};DATABASE=highscores;Trust_Connection=yes;'''
		1.8.70
		1.8.71					DECLARE conn INITIALLY dbc.connect(conn_str)
		1.8.72					DECLARE cursor INITIALLY conn.cursor()
		1.8.73					
		1.8.74					cursor.execute('TRUNCATE TABLE highscore;')
		1.8.75					
		1.8.76					DECLARE ins_query INITIALLY f'''INSERT INTO highscore (name, score) VALUES (?, ?);'''
		1.8.77					FOR EACH name, score IN scores DO cursor.execute(ins_query, (name, score)) END FOR
		1.8.78				
		1.8.79					conn.commit()
		1.8.80					Color.prints('Committed Data to Database Successfully')
		1.8.81				
		1.8.82					TRY
		1.8.83						DECLARE data INITIALLY cursor.execute('SELECT * FROM highscore;')
		1.8.84
		1.8.85						SET topScores TO [(name, score) FOR EACH name, score IN data END FOR]
		1.8.86						Color.prints('Successfully retrieved score data from database')
		1.8.87
		1.8.88						conn.close()
		1.8.89			
		1.8.90						Color.prints(f'Data: {topScores}')
		1.8.91						RETURN topScores
		1.8.92					EXCEPT Exception as e
		1.8.93						Color.printe(f'Error whilst trying to retrieve score data\n{e}')
		1.8.94					END TRY
		1.8.95				EXCEPT Exception as e
		1.8.96					Color.printe(f'Error: There was an unexpected error whilst trying to commit data to the sql database\n{e}')
		1.8.97				END TRY
		1.8.98			END FUNCTION
		1.8.99	END CLASS

2. Solo Files

	2.1 Main

		<imports>
		<from src.utils.ClrTerminal import Color>
		<from src.run import run>

		2.1.1 IF __name__ == '__main__' THEN
		2.1.2	Color.printd('Loading Netris...')
		2.1.3	run() # Run Game Using Main Window Surface for GUI Drawing
		2.1.4 END iF

	2.2 Home

		<imports>
		<from src.classes import necessary classes>
		<from pages import necessary run functions>
		<import pygame library>

		2.2.1 pygame.init()
		2.2.2 pygame.event.set_allowed([pygame.QUIT])
		2.2.3
		2.2.4 pygame.init() # Initialise Pygame
		2.2.5 DECLARE clock, settings INITIALLY pygame.time.Clock() AND Settings() # Games Clock (FPS) & Initialises Settings for Sound
		2.2.6
		2.2.7
		2.2.8 # List of GUI Objects
		2.2.9 DECLARE GUIObjects INITIALLY AS ARRAY of OBJECT [
		2.2.11												Text([480, 90], 'Netris', 106),
		2.2.12												Btn('New Game', [480, 310], 230, 41, 32), # New Game Btn
		2.2.13												Btn('Instructions', [480, 360], 300, 41, 32), # Instructions Btn
		2.2.14												Btn('Settings', [480, 410], 200, 41, 32), # Settings Btn
		2.2.15												Btn('Developer Mode', [480, 600], 210, 41, 16),
		2.2.16												Btn('Exit Game', [480, 460], 235, 41, 32) # Exit Btn
		2.2.17 ]
		2.2.18 PROCEDURE run() RETURNS NONE
		2.2.19
		2.2.20		settings.init()
		2.2.21		DECLARE win INITIALLY Window('Netris - Main Menu', (0, 0, 0)) # Instantiate Window Object
		2.2.22		win.CreateNewWindow() # Create New Window 
		2.2.23		
		2.2.24		win.drawGUIObjs(GUIObjects) # Draw the GUI
		2.2.25
		2.2.26 		# While the game is running
		2.2.27		WHILE 1 DO
		2.2.28			GUIObjects[1].isHovering(GameRun, settings.effectState) # Used to navigate to a New Game Page
		2.2.29			GUIObjects[2].isHovering(InstructionsRun, settings.effectState) # Used to navigate to Instructions Page
		2.2.30			GUIObjects[3].isHovering(SettingsRun, settings.effectState) # Used to navigate to Settings Page
		2.2.31			GUIObjects[4].isHovering(quit, settings.effectState) # Used to Exit the game
		2.2.32			GUIObjects[-1].isHovering(win.ExitWindow, settings.effectState)
		2.2.33
		2.2.34			# Check for Keyboard Input
		2.2.35			FOR EACH event FROM pygame.event.get() DO
		2.2.36				IF event.type == pygame.QUIT THEN win.ExitWindow() END IF
		2.2.37				IF event.type == pygame.KEYDOWN AND event.key == pygame.K_ESCAPE THEN win.ExitWindow() END IF
		2.2.38			END FOR EACH
		2.2.39		
		2.2.40			pygame.display.update()
		2.2.41			clock.tick(30)
		2.2.42		END WHILE
		2.2.43	END PROCEDURE

	2.3 Instructions

		<imports>
		<from src.classes import necessary classes>
		<import pygame library>

		2.3.1 pygame.init()
		2.3.2 pygame.event.set_allowed([pygame.QUIT])
		2.3.3 DECLARE clock, settings INITIALLY pygame.time.Clock() AND Settings()
		2.3.4
		2.3.5 # List of GUI Objects
		2.3.6 DECLARE GUIObjects INITIALLY [
		2.3.7								Text([480, 40], 'Instructions', 48),
        2.3.8  								Text([480, 100], 'Stack blocks to create a full horizontal line', 20),
        2.3.9								Text([320, 140], 'clearing them to earn points', 20),
        2.3.10								Text([447, 220], 'If the blocks reach the top of the screen,', 20),
        2.3.11								Text([119, 260], 'you lose!', 20),
        2.3.12
        2.3.13								Text([480, 320], 'How to Play', 32),
        2.3.13								Text([381, 380], '- Use the ↑ key to rotate the block', 20),
        2.3.14 								Text([410, 430], '- Use the ← & → keys to move the block', 20),
        2.3.15								Text([480, 470], '- Use the ↓ key to move the block down faster', 20),
        2.3.16								Text([480, 535], 'Have Fun Playing!', 20),
        2.3.17								Btn('Main Menu', [480, 620], 300, 48, 32)
		2.3.18 ]
		2.3.19
		2.3.20	METHODS
		2.3.21
		2.3.22		PROCEDURE InstructionsRun() RETURNS NONE
		2.3.23			DECLARE win INITIALLY Window('Netris - Instructions', (0, 0, 0)) # Instantiate Window Object
		2.3.24			win.CreateNewWindow() # Create New Window
		2.3.25
		2.3.26			win.drawGUIObjs(GUIObjects) # Draw the GUI
		2.3.27			settings.init() # Initialise Settings
		2.3.28			
		2.3.29			# While the game is running
		2.3.30			WHILE 1 DO
		2.3.31				GUIObjects[-1].isHovering(win.Leave, settings.effectState) # Used to navigate back to the main menu
		2.3.32				
		2.3.33				# Check for keyboard input
		2.3.34				FOR EACH event FROM pygame.event.get() DO
		2.2.35
		2.2.36					# If exit button is clicked (top right of window), exit
		2.2.37					IF event.type == pygame.QUIT THEN win.ExitWindow() END IF
		2.2.38				END FOR
		2.2.39		
		2.2.40				pygame.display.update()
		2.2.41				clock.tick(30)
		2.2.42			END WHILE
		2.2.43		END PROCEDURE
		2.2.44 END FILE

	2.4 Settings

		<imports>
		<from src.classes import necessary classes>
		<from utils import necessary classes>
		<import pygame library>
	
		2.4.1 pygame.init()
		2.4.2 pygame.event.set_allowed([pygame.QUIT])
		2.4.3
		2.4.4 DECLARE clock, settings INITIALLY pygame.time.Clock() AND Settings() # Initialise Game Clock & Settings
		2.4.5
		2.4.6 # List of GUI Objects
		2.4.7 DECLARE GUIObjects INITIALLY ARRAY OF OBJECT [Text([480, 90], 'Settings', 69),
        2.4.8  											 	Btn('Music: Off', [480, 260], 330, 48, 32),
        2.4.9                                               Btn('Sound Effects: Off', [480, 360], 580, 48, 32),
        2.4.10												Btn('Main Menu', [480, 490], 225, 48, 32)
		2.4.11 ]
		2.4.12
		2.4.13	PROCEDURE ChangeMusicState() RETURNS NONE
		2.4.14		pygame.mixer.Channel(1).set_volume(0) IF NOT settings.musicState ELSE pygame.mixer.Channel(.2).set_volume(1) END IF
		2.4.15		GUIObjects[1].ChangeState('Music: On', True) IF NOT settings.musicState ELSE GUIObjects[1].ChangeState('Music: Off', False) END IF
		2.4.16		settings.ChangeSettings(True) IF NOT settings.musicState ELSE settings.ChangeSettings(False) END IF
		2.4.17		Color.prints(f'Toggled Music ({settings.musicState})')
		2.4.18	END PROCEDURE
		2.4.19
		2.4.20	PROCEDURE ChangeEffectsState() RETURNS NONE
		2.4.21		pygame.mixer.Channel(0).set_volume(0) IF NOT settings.effectState ELSE pygame.mixer.Channel(0).set_volume(.3) END IF
    	2.4.22		GUIObjects[2].ChangeState('Sound Effects: On', True) IF NOT settings.effectState ELSE GUIObjects[2].ChangeState('Sound Effects: Off', False) END IF
    	2.4.23		settings.ChangeSettings(None, True) if not settings.effectState ELSE settings.ChangeSettings(None, False) END IF
		2.4.24	END PROCEDURE
		2.4.25
		2.4.26 	PROCEDURE OnRun() RETURNS NONE
		2.4.27		settings.init()
		2.4.28		GUIObjects[1].ChangeState('Music: On', True, drawGUI) IF settings.musicState ELSE GUIObjects[1].ChangeState('Music: Off', False, drawGUI) END IF
    	2.4.29		GUIObjects[2].ChangeState('Sound Effects: On', True, drawGUI) IF settings.effectState ELSE GUIObjects[2].ChangeState('Sound Effects: Off', False, drawGUI) END IF
		2.4.30	END PROCEDURE
		2.4.31
		2.4.32	PROCEDURE SettingsRun RETURNS NONE
		2.4.33		DECLARE win INITIALLY Window('Netris - Settings', (0, 0, 0)) # Instantiate Window Object
		2.4.34		win.CreateNewWindow() # Create New Window
		2.4.35
		2.4.36 		win.drawGUIObjs(GUIObjects) # Draw the GUI
    	2.4.37		OnRun() # Get Settings & Change Button States Accordingly
		2.4.38
		2.4.39		WHILE TRUE DO
		2.4.40				
		2.4.41			GUIObjects[1].isHovering(ChangeMusicState, settings.effectState)
		2.4.42			GUIObjects[2].isHovering(ChangeEffectState, settings.effectState)
		2.4.43			GUIObjects[-1].isHovering(win.Leave, settings.effectState)
		2.4.44			
		2.4.45			pygame.mixer.Channel(0).set_volume(.2) IF settings.effectState ELSE pygame.mixer.Channel(0).set_volume(0) END IF
		2.4.46			pygame.mixer.Channel(1).set_volume(1) IF settings.musicState ELSE pygame.mixer.Channel(1).set_volume(0) END IF
		2.4.47
		2.4.48			# Check for keyboard input
		2.4.49			FOR EACH event FROM pygame.event.get() DO
		2.4.50
		2.4.51				# If exit button is clicked (top right of window), exit
		2.4.52				IF event.type == pygame.QUIT THEN win.ExitWindow() END IF
		2.4.53			END FOR EACH
		2.4.54		
		2.4.55			pygame.display.update()
		2.4.56			clock.tick(30)
		2.4.57		END WHILE
		2.4.58	END PROCEDURE
		2.4.59 END FILE

	2.5 Game
		
		<imports>
		<from .classes import necessary classes>
		<from utils import necessary classes>
		<import pygame library>

		2.5.1 pygame.init()
		2.5.2 pygame.event.set_allowed([pygame.QUIT, pygame.KEYDOWN, pygame.KEYUP])
		2.5.3 DECLARE clock, settings INITIALLY (pygame.time.Clock(), Settings()) # Games Clock (Frames Per Second) & Initialise Settings
		2.5.4
		2.5.5 DECLARE GUIObjects INITIALLY [
		2.5.6								Text([495, 60], 'Netris', 40) # Title Text
		2.5.7				              	Text([173, 144], 'Controls', 32), # Controls Header
        2.5.8  								Text([135, 180], '↑ Rotate', 20),
    	2.5.9 								Text([164, 212], '← Move Left', 20),
		2.5.10								Text([175, 240], '→ Move Right', 20),
		2.5.11								Text([165, 272], '↓ Move Down', 20),
		2.5.12								Text([165, 300], '[Esc] Exit Game', 20),
		2.5.13								Text([800, 144], 'Score', 40), # Score Header
		2.5.14								Text([800, 200], '0', 36)
		2.5.15 ]
		2.5.16
		2.5.17 DECLARE rotateBlockSound, lineClearSound, moveBlockSound, scoreSound, failSound INITIALLY (
    	2.5.18 		pygame.mixer.Sound('Implementation/src/resources/sounds/rotateBlock.wav'), 
    	2.5.19		pygame.mixer.Sound('Implementation/src/resources/sounds/lineClear.wav'), 
    	2.5.20		pygame.mixer.Sound('Implementation/src/resources/sounds/moveBlock.wav'),
    	2.5.21		pygame.mixer.Sound('Implementation/src/resources/sounds/scoreSound.wav'),
    	2.5.22	    pygame.mixer.Sound('Implementation/src/resources/sounds/failSound.wav')
		2.5.23 )
		2.5.24
		2.5.25 PROCEDURE GameRun() RETURNS NONE
		2.5.26		Color.printd('Entering Game...')
		2.5.27		DECLARE win INITIALLY Window('Netris - Game', (0, 0, 0)) # Instantiate Window Object
		2.5.28 		win.CreateNewWindow()
		2.5.29
		2.5.30		settings.init() # Initialise Settings with settings from settings file
		2.5.31
		2.5.32		pygame.mixer.Channel(1).play(pygame.mixer.Sound('Implementation/src/resources/sounds/tetris.wav'), -1) # Play music
    	2.5.33 		pygame.mixer.Channel(1).set_volume(.2) IF settings.musicState ELSE pygame.mixer.Channel(1).set_volume(0) END IF # if music settings off, then turn off the music otherwise play the music 
		2.5.34
		2.5.35		DECLARE block INITIALLY Game.Block.GetRandBlock()
		2.5.36		block.DrawBlock(win.win)
		2.5.37
		2.5.38		DECLARE speed, mult, score, limit INITIALLY [0, 1, 0, 0]
		2.5.39		GUIObjects[-1].UpdateText((0, 0, 0), str(score)) # Update Score Count
		2.5.40
		2.5.41		DECLARE bottomBlocks INITIALLY pygame.sprite.Group()
		2.5.42
		2.5.43		DECLARE grid INITIALLY Grid(((720 // 2), 100)) # Initialise New Game Grid
		2.5.44		grid.DrawGrid(win.win)		
		2.5.45
		2.5.46		WHILE 1 DO # while the game is running
		2.5.47			grid.DrawGrid(win.win)
		2.5.48
		2.5.49			FOR EACH event IN pygame.event.get(): # Check for keyboard input
		2.5.50				IF event.type == pygame.QUIT THEN win.ExitWindow() END IF 
		2.5.51
		2.5.52				IF event.type == pygame.KEYDOWN THEN
		2.5.53					<match event.key>
		2.5.54						<key is esc> 
		2.5.55							pygame.mixer.Channel(1).stop()
		2.5.56							win.Leave()
		2.5.57
		2.5.58						<key is up arr> 
		2.5.59							block.Rotate(win)
		2.5.60							if settings.effectState THEN pygame.mixer.Channel(0).play(rotateBlockSound) END IF
		2.5.61
		2.5.62						<key is down arr> 
    	2.5.63            				block.Move(win, (0, 30), 'down')
		2.5.64	        				IF settings.effectState THEN pygame.mixer.Channel(0).play(moveBlockSound) END IF
        2.5.65    
		2.5.66						<key is right arr>
		2.5.67							IF block.CheckMovable('right') THEN
        2.5.68            					block.Move(win, (-30, 0), 'right')
        2.5.69         						IF settings.effectState THEN pygame.mixer.Channel(0).play(moveBlockSound) END IF
		2.5.70							END IF
        2.5.71
		2.5.72						<key is left arr>	
		2.5.73							IF block.CheckMovable('left') THEN
        2.5.74          					block.Move(win, (30, 0), 'left')
        2.5.75           					IF settings.effectState THEN pygame.mixer.Channel(0).play(moveBlockSound) END IF
		2.5.76							END IF
		2.5.77						
		2.5.78						<default> PASS
		2.5.79				END IF
		2.5.80			END FOR
		2.5.81
		2.5.82			IF speed*mult >= 30 THEN
		2.5.83				block.Move(win, (0, 30), 'down')
        2.5.84				SET speed TO 0
		2.5.85			END IF
		2.5.86
		2.5.87			IF block.CheckCollision(bottomBlocks) THEN
		2.5.88				bottomBlocks.add(block)
        2.5.89 				IF settings.effectState THEN pygame.mixer.Channel(2).play(scoreSound) END IF
		2.5.90				
		2.5.91				SET score TO score + 50
		2.5.92				IF score >= limit THEN
		2.5.93					SET mult TO mult + 1
		2.5.94					SET limit TO limit + 500
		2.5.95				END IF
		2.5.96				
		2.5.97				IF block.reachedTop(bottomBlocks) THEN
		2.5.98					Color.prints('Reached Top of Screen')
		2.5.109					<from scoreInput import InputRun>
		2.5.110					IF settings.effectState THEN pygame.mixer.Channel(0).play(failSound) END IF
		2.5.111					pygame.mixer.Channel(1).stop()
		2.5.112					InputRun(score)
		2.5.113				ELSE
		2.5.114					SET block TO Game.Block.GetRandBlock()
		2.5.115					block.draw(win.win)
		2.5.118				END IF
		2.5.117			END IF
		2.5.118
		2.5.119			pygame.display.update()
		2.5.120			clock.tick(30)
		2.5.121			SET speed TO speed + 1
		2.5.122		END WHILE
		2.5.129 END PROCEDURE
		2.5.130 END FILE

	2.6 ScoreInput
		
		<imports>
		<from src.classes import necessary classes>
		<from utils import necessary classes>
		<import pygame library>

		2.6.1 pygame.init()
		2.6.2 pygame.event.set_allowed([pygame.KEYDOWN, pygame.TEXTINPUT])
		2.6.3 
		2.6.4 DECLARE clock, settings INITIALLY (pygame.time.Clock(), Settings())
		2.6.5 disallowedKeys = [chr(key) FOR key IN RANGE(0, 255) IF NOT chr(key).isalpha() END IF END FOR]
		2.6.6
		2.6.7 DECLARE GUIObjects INITIALLY [
		2.6.8 		Text([480, 90], 'Netris', 106), # Game Title
    	2.6.9		Text([480, 210], 'Enter Name', 48), 
		2.6.10		Text([480, 320], 'PLA', 48), # Users name Input
		2.6.11		Btn('Enter', [480, 440], 300, 48, 48) # Enter Button
		2.6.12 ]
		2.6.13
		2.6.14 PROCEDURE InputRun(INTEGER score INITIALLY 0)
		2.6.15		settings.init()
		2.6.16		DECLARE allowedClick INITIALLY FALSE
		2.6.17		
		2.6.18		DECLARE win INITIALLY Window('Netris - Score Input', (0, 0, 0))
		2.6.19		win.CreateWindow()
		2.6.20		win.drawGUIObjs(GUIObjects)
		2.6.21
		2.6.22		WHILE 1 DO
		2.6.23			<from highscores import RunHighscore>
		2.6.24			IF allowedClick THEN
		2.6.25				GUIObjects[-1].isHovering(RunHighscore, settings.effectState, (255, 0, 0), GUIObjects[2].caption[:3], score[0])   
		2.6.26			ELSE
		2.6.27				GUIObjects[-1].isHovering(InputRun, settings.effectState, (128, 128, 128))
		2.6.28			END IF
		2.6.29
		2.6.30			IF LENGTH GUIObjects[2].caption == 3 THEN SET allowedClick TO TRUE END IF
		2.6.31			IF LENGTH GUIObjects[2].caption < 3 THEN SET allowedClick TO FALSE END IF
		2.6.32			
		2.6.33			IF LENGTH GUIObjects[2].caption > 3 THEN
		2.6.34				SET allowedClick TO FALSE
		2.6.35			    Color.printe('Exceeded Character Limit')
        2.6.36				GUIObjects[2].UpdateText((0, 0, 0), GUIObjects[2].caption[:3])
		2.6.37			END IF
		2.6.38
		2.6.39			FOR EACH event IN pygame.event.get() DO
		2.6.40				IF event.type == pygame.KEYDOWN THEN
		2.6.41					IF event.key == pygame.K_BACKSPACE THEN
		2.6.42						GUIObjects[2].UpdateText((0, 0, 0), GUIObjects[2].caption[:-1])
		2.6.43					END IF
		2.6.44					
		2.6.45					IF event.key == pygame.K_RETURN OR event.key == pygame.K_KP_ENTER THEN
		2.6.46						IF allowedClick THEN RunHighscore(GUIObjects[2].caption[:3], score[0]) END IF
		2.6.47					END IF
		2.6.48				END IF
		2.6.49
		2.6.50				IF event.type == pygame.TEXTINPUT THEN
		2.6.51					IF event.text NOT IN disallowedKeys THEN
		2.6.52						GUIObjects[2].UpdateText((0, 0, 0), GUIObjects[2].caption + event.text)
		2.6.53					ELSE
		2.6.54						Color.printe(f'Error: Illegal Character "{event.text}"')
		2.6.55					END IF
		2.6.56				END IF
		2.6.57			END FOR
		2.6.58			
		2.6.59			pygame.display.update()
		2.6.60			clock.tick(30)
		2.6.61 		END WHILE
		2.6.62 END PROCEDURE
		2.6.63 END FILE

	2.7 Highscore
		<imports>
		<from classes import necessary classes>
		<from game import GameRun>
		<import pygame library>

		2.7.1 pygame.init()
		2.7.2 pygame.event.set_allowed([pygame.QUIT])
		2.7.3 
		2.7.4 DECLARE clock, settings INITIALLY (pygame.time.Clock(), Settings())
		2.7.5
		2.7.6 FUNCTION InitialiseGUI(STRING name, INTEGER score) RETURNS LIST
		2.7.7 		DECLARE scores INITIALLY []
		2.7.8		
		2.7.9		DECLARE GUIObjects INITIALLY [Text([480, 90], 'Netris', 106),
    	2.7.10									  Btn('Main Menu', [720, 600], 300, 48, 32),
        2.7.11									  Btn('New Game', [240, 600], 300, 48, 32)]
		2.7.12		
		2.7.13		DECLARE userScore INITIALLY Highscore(name, score)
		2.7.14		SET scores TO userScore.BubbleSortScores(userScore.GetScoresFromFile('Implementation/scores.txt'))
		2.7.15		
		2.7.16		DECLARE height INITIALLY 140
		2.7.17		
		2.7.18		FOR i IN RANGE(LENGTH scores) DO
		2.7.19			SET height TO height + 60
		2.7.20			GUIObjects.append(Text([480, height], f'{scores[i][0]}: {scores[i][1]}', 36))
		2.7.21		END FOR
		2.7.22
		2.7.23		GUIObjects.append(Text([480, height+80], 'HIGHSCORE!' IF score >= scores[0][1] ELSE '' END IF, 36))
		2.7.24	
		2.7.25		RETURN GUIObjects
		2.7.26 END FUNCTION
		2.7.27
		2.7.28 PROCEDURE RunHighscore(TUPLE user INITIALLY ('PLA', 0))
		2.7.29		DECLARE name, score INITIALLY user
		2.7.30		
		2.7.31		settings.init()
		2.7.32		DECLARE GUIObjects INITIALLY InitialiseGUI(name, score)
		2.7.33		
		2.7.34		DECLARE win INITIALLY Window('Netris - Highscore', (0, 0, 0))
		2.7.35		win.CreateWindow()
		2.7.36		win.drawGUIObjs(GUIObjects)
		2.7.37
		2.7.38		WHILE 1 DO
		2.7.39			GUIObjects[1].isHovering(win.Leave, settings.effectState)
        2.7.40			GUIObjects[2].isHovering(GameRun, settings.effectState)
		2.7.41			
		2.7.42			FOR EACH event IN pygame.event.get() DO
		2.7.43				IF event.type == pygame.QUIT THEN win.ExitWindow() END IF
		2.7.44			END FOR
		2.7.45
		2.7.46			pygame.display.update()
		2.7.47			clock.tick(30)
		2.7.48 END PROCEDURE
		2.7.49 END FILE

3. Utilities

	3.1 ClrTerminal
		3.1.1 CLASS Color IS {}
		3.1.2	
		3.1.3	# Foreground Colors
		3.1.4	DECLARE FORE_BLACK INITIALLY STRING '\x1b[30m'
		3.1.5	DECLARE FORE_RED INITIALLY STRING '\x1b[31m'
		3.1.6	DECLARE FORE_GREEN INITIALLY STRING '\x1b[32m'
		3.1.7	DECLARE FORE_YELLOW INITIALLY STRING '\x1b[33m'
		3.1.8	DECLARE FORE_BLUE INITIALLY STRING '\x1b[34m'
		3.1.9	DECLARE FORE_MAGENTA INITIALLY STRING '\x1b[35m'
		3.1.10	DECLARE FORE_CYAN INITIALLY STRING '\x1b[36m'
		3.1.11	DECLARE FORE_WHITE INITIALLY STRING '\x1b[37m'
		3.1.12	DECLARE FORE_ORANGE INITIALLY STRING '\x1b[38;5;208m'
		3.1.13
		3.1.14	# Background Colors
		3.1.15	DECLARE BACK_BLACK INITIALLY '\x1b[40m'
		3.1.16	DECLARE BACK_RED INITIALLY '\x1b[41m'
		3.1.17	DECLARE BACK_GREEN INITIALLY '\x1b[42m'
		3.1.18	DECLARE BACK_YELLOW INITIALLY '\x1b[43m'
		3.1.19	DECLARE BACK_BLUE INITIALLY '\x1b[44m'
		3.1.20	DECLARE BACK_MAGENTA INITIALLY '\x1b[45m'
		3.1.21	DECLARE BACK_CYAN INITIALLY '\x1b[46m'
		3.1.22	DECLARE BACK_WHITE INITIALLY '\x1b[47m'
		3.1.23
		3.1.24
		3.1.25	DECLARE RESET INITIALLY '\003[0m'
		3.1.26
		3.1.27	METHODS
		3.1.28
		3.1.29		PROCEDURE ClrPrint(STRING clr, STRING txt, BOOLEAN isBack, BOOLEAN reset) RETURNS NONE
		3.1.30			# Prints Colored Text to the Terminal
		3.1.31
		3.1.32				<match clr> # Checks for the color name
		3.1.33					<case 'white'> print(f'{DO Color.BACK_WHITE IF isBack ELSE Color.FORE_WHITE END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.34					<case 'black'> print(f'{DO Color.BACK_BLACK IF isBack ELSE Color.FORE_BLACK END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.35					<case 'red'> print(f'{DO Color.BACK_RED IF isBack ELSE Color.FORE_RED END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.36					<case 'green'> print(f'{DO Color.BACK_GREEN IF isBack ELSE Color.FORE_GREEN}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.37					<case 'yellow'> print(f'{DO Color.BACK_YELLOW IF isBack ELSE Color.FORE_YELLOW END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.38					<case 'blue'> print(f'{DO Color.BACK_BLUE IF isBack ELSE Color.FORE_BLUE}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.39					<case 'magenta'> print(f'{DO Color.BACK_MAGENTA IF isBack ELSE Color.FORE_MAGENTA}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.40					<case 'cyan'> print(f'{DO Color.BACK_CYAN IF isBack ELSE Color.FORE_CYAN}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.41					<case 'orange'> print(f'{DO "" IF isBack ELSE Color.FORE_CYAN}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.42					<case _> print(txt)
		3.1.43				<end match>
		3.1.44			END IF
		3.1.45		END PROCEDURE
		3.1.46
		3.1.47		PROCEDURE printd(STRING str INITIALLY ''):
		3.1.48			'''Debug Printing'''
		3.1.49			print(f'{Color.FORE_ORANGE}{txt}{Color.RESET}')
		3.1.50		END PROCEDURE
		3.1.51
		3.1.52		PROCEDURE printe(STRING str INITIALLY ''):
		3.1.53			'''Error Printing'''
		3.1.54			print(f'{Color.FORE_RED}{txt}{Color.RESET}')
		3.1.55		END PROCEDURE
		3.1.56
		3.1.57		PROCEDURE prints(STRING str INITIALLY ''):
		3.1.58			'''Success Printing'''
		3.1.59			print(f'{Color.FORE_GREEN}{txt}{Color.RESET}')
		3.1.60		END PROCEDURE
		3.1.46	END CLASS