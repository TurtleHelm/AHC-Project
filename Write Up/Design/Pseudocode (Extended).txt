# Classes
	1.1 Window Class
	1.2 Text Class
	1.3 Btn Class
	1.4 Settings Class
	1.5 Game Class
		1.5.1 Block Class
		1.5.2 Rectangle Class
		1.5.3 LBlock Class
		1.5.4 SquareBlock Class
		1.5.5 TBlock Class
		1.5.6 SBlock Class
		1.5.7 ZBlock Class
		1.5.8 LineBlock Class
		1.5.9 JBlock Class
	1.6 GridRect Class
	1.7 Grid Class
	1.8 Highscore Class

# Solo Files
	2.1 Main
	2.2 Home
	2.3 Instructions
	2.4 Settings
	2.5 Game
	2.6 ScoreInput
	2.7 Highscore

# Utilities
	3.1 ClrTerminal

1. Classes

	<imports>
	<from pathlib import Path>
	<import pygame>

	1.1 Window Class
		1.1.1 CLASS Window IS {STRING window_title INITIALLY 'Title', TUPLE bg_color INITIALLY (255, 255, 255)}
		1.1.2 	
		1.1.3	METHODS
		1.1.4
		1.1.5		CONSTRUCTOR(THIS, STRING window_title, TUPLE bg_color)
		1.1.6			DECLARE THIS.screen_size INITIALLY (960, 720)
		1.1.7 			DECLARE THIS.window_title INITIALLY window_title
		1.1.8			DECLARE THIS.bg_color INITIALLY bg_color
		1.1.9			DECLARE THIS.icon = pygame.image.load(f'{str(Path(__file__).parents[0])}\\resources\\images\\icon.png')
		1.1.10		END CONSTRUCTOR
		1.1.11
		1.1.12		PROCEDURE CreateNewWindow(THIS)
		1.1.13			DECLARE THIS.win = pygame.display.set_mode(size=self.window_size)
		1.1.14			THIS.win.fill(THIS.bg_color)
		1.1.15			pygame.display.set_caption(self.window_title)
		1.1.16			pygame.display.flip()
		1.1.17		END PROCEDURE
		1.1.18
		1.1.19		<@staticmethod>
		1.1.20		PROCEDURE ExitWindow()
		1.1.21			pygame.display.quit()
		1.1.22			Color.printd('Exiting Window...')
		1.1.23			pygame.quit()
		1.1.24			quit(0)
		1.1.25		END PROCEDURE
		1.1.26
		1.1.27		PROCEDURE drawGUIObjs(THIS, LIST GUIObjects INITIALLY NONE)
		1.1.28			IF GUIObjects == None THEN PASS 
		1.1.29			ELSE
		1.1.30				FOR EACH GUIObj IN GUIObjects DO
		1.1.31					<match GUIObj type>
		1.1.32						<type Text> GUIObj.RenderText()
		1.1.33						<type Btn> GUIObj.RenderBtn()
		1.1.34						<type default> PASS
		1.1.35				END FOR EACH
		1.1.36			END IF
		1.1.37			pygame.display.flip()
		1.1.38
		1.1.39		END PROCEDURE
		1.1.40
		1.1.41		<@staticmethod>
		1.1.42		PROCEDURE Leave()
		1.1.43			<from .home import run>
		1.1.44			run()
		1.1.45		END PROCEDURE
		1.1.46 END CLASS

	1.2 Text Class
		1.2.1 CLASS Text INHERITS pygame.sprite.Sprite WITH {ARRAY OF INTEGER pos, STRING text, INTEGER fontsize, TUPLE color}
		1.2.2	
		1.2.3	METHODS
		1.2.4
		1.2.5		CONSTRUCTOR(THIS, ARRAY OF INTEGER pos INITIALLY [0, 0], STRING text INITIALLY 'Text', INTEGER fontsize INITIALLY 20, TUPLE color INITIALLY (255, 255, 255))
		1.2.6			IF NOT pygame.font.get_init THEN pygame.font.init() END IF
		1.2.7			DECLARE THIS.surface INITIALLY pygame.display.get_surface()
		1.2.8			DECLARE THIS.givenPos INITIALLY pos
		1.2.9			DECLARE THIS.color INITIALLY color
		1.2.10			DECLARE THIS.fontsize INITIALLY fontsize
		1.2.11			DECLARE THIS.text INITIALLY pygame.font.Font(f'{str(Path(__file__).parents[0])}\\resources\\fonts\\font.ttf', self.fontsize).render(text, False, self.color)
		1.2.12			DECLARE THIS.pos INITIALLY [THIS.givenPos[0] - (THIS.text.get_width() // 2), THIS.givenPos[1] - (THIS.text.get_height() // 2)]
		1.2.13			DECLARE THIS.caption INITIALLY text
		1.2.14		END CONSTRUCTOR
		1.2.15
		1.2.16		PROCEDURE RenderText(THIS)
		1.2.17			pygame.display.get_surface().blit(THIS.text, THIS.pos)
		1.2.18			pygame.display.flip()
		1.2.19		END PROCEDURE
		1.2.20
		1.2.21		PROCEDURE ChangeText(THIS, STRING text INITIALLY '', PROCEDURE draw INITIALLY NONE)
		1.2.22			SET THIS.text AS pygame.font.Font(f'{str(Path(__file__).parents[0])}\\resources\\fonts\\font.ttf, THIS.fontsize).render(text, FALSE, THIS.COLOR) # Sets New Text
		1.2.23			SET THIS.pos AS ARRAY [THIS.givenPos[0] - (THIS.text.get_width() // 2), THIS.givenPos[1] - (THIS.text.get_height() // 2)]
		1.2.24			draw() IF draw IS NOT NONE ELSE self.RenderText() END IF
		1.2.25		END PROCEDURE
		1.2.26
		1.2.27		PROCEDURE ChangeColor(THIS, TUPLE color INITIALLY (255, 255, 255))
		1.2.28			SET THIS.color AS color
		1.2.29			SET THIS.text AS pygame.font.Font(f'{str(Path(__file__).parents[0])}\\resources\\fonts\\font.ttf, THIS.fontsize).render(THIS.caption, FALSE, color)
		1.2.30			SET THIS.pos AS [self.givenPos[0] - (self.text.get_width() // 2), self.givenPos[1] - (self.text.get_height() // 2)] # update position
		1.2.31			THIS.RenderText()
		1.2.32		END PROCEDURE
		1.2.33
		1.2.34		PROCEDURE UpdateText(THIS, TUPLE color INITIALLY (255, 255, 255), STRING text INITIALLY '')
		1.2.35			THIS.ChangeColor(color)
		1.3.36			THIS.ChangeText(text)
		1.3.37			THIS.ChangeColor((255, 255, 255))
		1.3.38		END PROCEDURE
		1.2.39
		1.2.40		FUNCTION __name__(THIS) RETURNS STRING
		1.2.41			RETURN 'Text'
		1.2.42		END FUNCTION
		1.2.43		
		1.2.44		FUNCTION ReturnText(THIS) RETURNS STRING
		1.2.45			return THIS.caption
		1.2.46		END FUNCTION
		1.2.47 END CLASS

	1.3 Btn Class
		1.3.1 CLASS Btn INHERITS pygame.sprite.Sprite WITH {STRING text INITIALLY '', ARRAY OF INTEGER pos INITIALLY [0, 0], INTEGER width INITIALLY 113, INTEGER height INITIALLY 41, INTEGER fontsize INITIALLY 16}
		1.3.2
		1.3.3 	METHODS
		1.3.4
		1.3.5		CONSTRUCTOR(THIS, STRING text, ARRAY OF INTEGER pos INITIALLY [0, 0], INTEGER width INITIALLY 113, INTEGER height INITIALLY 41, INTEGER fontsize INITIALLY 16)
		1.3.6			DECLARE THIS.pos INITIALLY pos
		1.3.7			DECLARE THIS.surf INITIALLY pygame.display.get_surface() # Get Window Surface
		1.3.8			DECLARE THIS.face = pygame.Rect(THIS.pos, (width, height)) # Create Rect
		1.3.9			DECLARE THIS.face.center INITIALLY THIS.pos
		1.3.10			DECLARE THIS.hovering INITIALLY FALSE # Checks if button is being hovered
		1.3.11			DECLARE THIS.fontsize INITIALLY fontsize
		1.3.12			DECLARE THIS.textColor INITIALLY TUPLE (255, 255, 255)
		1.3.13			DECLARE THIS.text INITIALLY Text(THIS.pos, text, THIS.fontsize, THIS.textColor)
		1.3.14			DECLARE THIS.caption INITIALLY text
		1.3.15			DECLARE THIS.state INITIALLY FALSE
		1.3.16			DECLARE THIS.hoverSound INITIALLY f'{str(Path(__file__).parents[0])}\\resources\\sounds\\hoverSound.wav'
		1.3.17			DECLARE THIS.selectSound INITIALLY f'{str(Path(__file__).parents[0])}\\resources\\sounds\\selectSound.wav'
		1.3.18		END CONSTRUCTOR
		1.3.19
		1.3.20
		1.3.21		PROCEDURE ChangeState(THIS, STRING txt, BOOLEAN state)
		1.3.22			SET THIS.state AS state
		1.3.23			THIS.text.ChangeText(txt, THIS.RenderBtn)
		1.3.24		END PROCEDURE
		1.3.25
		1.3.26		PROCEDURE isHovering(THIS, PROCEDURE click, BOOLEAN effectState, TUPLE color INITIALLY (255, 0, 0), TUPLE *args)
		1.3.27			IF THIS.face.collidepoint(pygame.mouse.get_pos()) THEN
		1.3.28				IF NOT THIS.hovering
		1.3.29					SET THIS.hovering AS TRUE
		1.3.30					THIS.text.ChangeColor(color)
		1.3.31					pygame.mixer.Channel(0).set_volume(.3) IF effectState ELSE pygame.mixer.Channel(0).set_volume(0) END IF
		1.3.32   				pygame.mixer.Channel(0).play(pygame.mixer.Sound(self.hoverSound)) IF effectState ELSE pygame.mixer.Channel(0).set_volume(0) END IF
		1.3.33					THIS.RenderBtn()
		1.3.34
		1.3.35				ELSE THIS.HasClicked(click, *args)
		1.3.36				END IF
		1.3.37
		1.3.38			ELSE IF NOT THIS.face.collidepoint(pygame.mouse.get_pos()) AND THIS.hovering THEN
		1.3.39				SET THIS.hovering AS FALSE
		1.3.40				SET THIS.text.ChangeColor((255, 255, 255))
		1.3.41				THIS.RenderBtn()
		1.3.42			END IF
		1.3.43		END PROCEDURE
		1.3.44
		1.3.45		PROCEDURE HasClicked(THIS, PROCEDURE click, TUPLE *args)
		1.3.46			IF pygame.mouse.get_pressed()[0] THEN
		1.3.47				pygame.mixer.Channel(0).play(pygame.mixer.Sound(THIS.selectSound))
		1.3.48				click() IF NOT args ELSE click(args IF LENGTH args > 1 ELSE args[0] END IF) END IF
		1.3.49				
		1.3.50				<from time import sleep>
		1.3.51				sleep(.3)
		1.3.52			END IF
		1.3.53		END PROCEDURE
		1.3.54
		1.3.55		PROCEDURE RenderBtn(THIS) RETURNS NONE
		1.3.56			pygame.draw.rect(pygame.display.get_surface(), (0, 0, 0), THIS.face)
		1.3.57			THIS.text.RenderText()
		1.3.58		END PROCEDURE
		1.3.59
		1.3.60		<@staticmethod>
		1.3.61		FUNCTION __name__(THIS) RETURNS STRING
		1.3.62			RETURN 'Btn'
		1.3.63		END FUNCTION

	1.4 Settings Class
		1.4.1 CLASS Settings IS {}
		1.4.2	# Class for Game Settings
		1.4.3	METHODS
		1.4.4	
		1.4.5		CONSTRUCTOR(THIS, BOOLEAN musicState INITIALLY TRUE, BOOLEAN effectState INITIALLY TRUE)
		1.4.6			DECLARE THIS.musicState INITIALLY musicState
		1.4.7			DECLARE THIS.effectState INITIALLY effectState
		1.4.8			DECLARE THIS.filePath INITIALLY f'{str(Path(__file__).parents[1])}\\settings.txt'
		1.4.9		END CONSTRUCTOR
		1.4.10
		1.4.11		PROCEDURE init(THIS) RETURNS NONE
		1.4.12			# Gets Settings from File
		1.4.13			IF NOT os.path.isfile(THIS.filePath) DO self.WriteSettings(False) # If there is no settings file, make one
		1.4.14			
		1.4.15			ELSE # Otherwise
		1.4.16				<open settings file as f> # Open the file
		1.4.17					DECLARE settings INITIALLY ARRAY OF STRING f.read().split(',') # Split values by comma
		1.4.18					f.close() # Close file
		1.4.19			
		1.4.20				SET THIS.musicState AS TRUE IF settings[0] == 'True' ELSE FALSE END IF
		1.4.21				SET THIS.effectState AS TRUE IF settings[0] == 'True' ELSE FALSE END IF
		1.4.22		END PROCEDURE
		1.4.23
		1.4.24		PROCEDURE WriteSettings(THIS, BOOLEAN rem) RETURNS NONE
		1.4.25			IF rem DO remove('settings.txt')
		1.4.26			
		1.4.27			<open filePath in write mode as f>
		1.4.28				f.write(f'{str(THIS.musicState)}')
		1.4.29				f.write(f'{str(THIS.effectState)}')
		1.4.30				f.close()
		1.4.31			THIS.init()
		1.4.32		END PROCEDURE
		1.4.33
		1.4.34		PROCEDURE ChangeSettings(THIS, BOOLEAN musicBool INITIALLY NONE, BOOLEAN effectsBool INITIALLY NONE) RETURNS NONE
		1.4.35			SET THIS.musicState AS musicBool IF musicBool != NONE ELSE THIS.musicState END IF
		1.4.36			SET THIS.effectState AS effectsBool IF effectsBool != NONE ELSE THIS.effectState
		1.4.37			THIS.WriteSettings(True)
		1.4.38		END PROCEDURE
		1.4.39
		1.4.40		FUNCTION ReturnStates(THIS) RETURNS STRING
		1.4.41			RETURN f'Music: {THIS.musicState}\nEffects: {THIS.effectState}'
		1.4.42		END FUNCTION
		1.4.43	END CLASS

	1.5 Game Class
		1.5.1 Block Class
			1.5.1.1 CLASS BLOCK INHERITS pygame.sprite.Sprite WITH {TUPLE OF TUPLES struct, TUPLE color}
			1.5.1.2			CONSTRUCTOR(THIS, TUPLE OF TUPLES struct, TUPLE color)
			1.5.1.3				DECLARE THIS.struct INITIALLY struct
			1.5.1.4				DECLARE THIS.color INITIALLY color
			1.5.1.5				DECLARE THIS.realPos INITIALLY [450, 100]
			1.5.1.6				DECLARE THIS.blockSize INITIALLY 30
			1.5.1.7				DECLARE THIS.group INITIALLY pygame.sprite.Group()
			1.5.1.8			END CONSTRUCTOR
			1.5.1.9
			1.5.1.10	METHODS
			1.5.1.11 		<@staticmethod>
			1.5.1.12 		FUNCTION GetRandBlock() RETURNS Game.<random block variation>
			1.5.1.13			RETURN choice((Game.LBlock, Game.SquareBlock, Game.TBlock, Game.SBlock, Game.ZBlock, Game.LineBlock, Game.JBlock))()
			1.5.1.14		END FUNCTION
			1.5.1.15
			1.5.1.16		PROCEDURE draw(THIS, SURFACE screen)
			1.5.1.17			DECLARE posX, posY INITIALLY THIS.realPos
			1.5.1.18			
			1.5.1.19			FOR y IN RANGE(LENGTH THIS.struct) DO
			1.5.1.20				FOR x IN RANGE(LENGTH THIS.struct[y]) DO
			1.5.1.21					IF y > 0 AND x == 0 THEN 
			1.5.1.22						SET posY TO posY + 30
			1.5.1.23						SET posX TO posX - (30*3)
			1.5.1.24					END IF
			1.5.1.25
			1.5.1.26					IF THIS.struct[y][x] == 1 THEN
			1.5.1.27						THIS.group.add(Game.Rectangle((posX, posY), THIS.color, THIS.blockSize))
			1.5.1.28						SET posX TO posX + 30
			1.5.1.29
			1.5.1.30					ELSE SET posX TO posX + 30
			1.5.1.31					END IF
			1.5.1.32				END FOR
			1.5.1.33			END FOR
			1.5.1.34			THIS.group.draw(screen)
			1.5.1.35		END PROCEDURE
			1.5.1.36	
			1.5.1.37		PROCEDURE Move(THIS, SURFACE screen, STRING dirName, BOOLEAN effectState, pygame.mixer.Sound sound)
			1.5.1.38			THIS.UpdateColor((0, 0, 0), screen)
			1.5.1.39			THIS.group.empty()
			1.5.1.40			
			1.5.1.41			<match dirName>
			1.5.1.42				<dirName is 'left'> 
			1.5.1.43					THIS.group.update((30, 0))
			1.5.1.44					SET THIS.realPos[0] TO THIS.realPos[0] - 30
			1.5.1.45
			1.5.1.46				<dirName is 'right'> 
			1.5.1.47					THIS.group.update((-30, 0))
			1.5.1.48					SET THIS.realPos[0] TO THIS.realPos[0] + 30
			1.5.1.49
			1.5.1.50				<dirName is 'down'> 
			1.5.1.51					IF THIS.realPos[1] < 670 THEN
			1.5.1.52						THIS.group.update((0, 30))
			1.5.1.53						SET THIS.realPos[1] TO THIS.realPos[1] + 30
			1.5.1.54					END IF
			1.5.1.55			<end match>
			1.5.1.56
			1.5.1.57			IF effectState THEN pygame.mixer.Channel(0).play(sound) END IF
			1.5.1.58			Game.Block.draw(THIS, win.win)
			1.5.1.59		END PROCEDURE
			1.5.1.60
			1.5.1.61		FUNCTION CheckCollision(THIS, pygame.Sprite.Group blockGroup, STRING dir) RETURNS BOOLEAN
			1.5.1.62			FOR i IN RANGE(LENGTH blockGroup.sprites()) DO
			1.5.1.63				FOR j IN RANGE(LENGTH THIS.group.sprites()) DO
			1.5.1.64					IF dir == 'down' THEN
			1.5.1.65						IF Game.Block.WillCollide(THIS.group.sprites()[j], blockGroup.sprites()[i], 'down') THEN RETURN TRUE END IF
			1.5.1.66					END IF
			1.5.1.67					IF dir == 'right' THEN
			1.5.1.68						IF Game.Block.WillCollide(THIS.group.sprites()[j], blockGroup.sprites()[i], 'right') THEN RETURN TRUE END IF
			1.5.1.69					END IF
			1.5.1.70					IF dir == 'left' THEN
			1.5.1.71						IF Game.Block.WillCollide(THIS.group.sprites()[j], blockGroup.sprites()[i], 'left') THEN RETURN TRUE END IF
			1.5.1.72					END IF
			1.5.1.73				END FOR
			1.5.1.74			END FOR
			1.5.1.75
			1.5.1.76			FOR i IN RANGE(LENGTH THIS.group.sprites()) DO
			1.5.1.77				IF THIS.group.sprites()[i].posY == 670 THEN RETURN TRUE END IF
			1.5.1.78			END FOR
			1.5.1.79		
			1.5.1.80			RETURN FALSE
			1.5.1.81		END FUNCTION
			1.5.1.82
			1.5.1.83		FUNCTION CheckMovable(THIS, STRING dir, pygame.Sprite.Group group) RETURNS BOOLEAN
			1.5.1.84			FOR i IN RANGE(LENGTH THIS.group.sprites()) DO
			1.5.1.85				<match dir>
			1.5.1.86					<case 'right'>
			1.5.1.87						IF THIS.group.sprites()[i].posX == 600 THEN RETURN FALSE
			1.5.1.88						ELSE
			1.5.1.89							FOR EACH rect IN THIS.group.sprites() DO
			1.5.1.90								FOR EACH gridRect IN group.sprites() DO
			1.5.1.91									IF THIS.WillCollide(rect, gridRect, 'right') THEN RETURN FALSE END IF
			1.5.1.92								END FOR EACH
			1.5.1.93							END FOR EACH
			1.5.1.94						END IF
			1.5.1.95					
			1.5.1.96					<case 'left'>
			1.5.1.97						IF THIS.group.sprites()[i].posX == 360 THEN RETURN FALSE END IF
			1.5.1.98						ELSE
			1.5.1.99							FOR EACH rect IN THIS.group.sprites() DO
			1.5.1.100								FOR EACH gridRect IN group.sprites() DO
			1.5.1.101									IF THIS.WillCollide(rect, gridRect, 'left') THEN RETURN FALSE END IF
			1.5.1.102								END FOR EACH
			1.5.1.103							END FOR EACH
			1.5.1.104						END IF
			1.5.1.105				<end match>
			1.5.1.106			END FOR
			1.5.1.107		END FUNCTION
			1.5.1.108
			1.5.1.109 		PROCEDURE UpdateColor(THIS, TUPLE color, pygame.Surface screen)
			1.5.1.110			DECLARE originalColor INITIALLY THIS.color
			1.5.1.111			SET THIS.color TO color
			1.5.1.112			THIS.draw(screen)
			1.5.1.113			SET THIS.color TO originalColor
			1.5.1.114		END PROCEDURE
			1.5.1.115
			1.5.1.116		PROCEDURE Rotate(THIS, pygame.Surface screen, BOOLEAN effectState, pygame.mixer.Sound sound, pygame.Sprite.Group group)
			1.5.1.117			IF NOT isinstance(THIS, Game.SquareBlock) THEN
			1.5.1.118				IF THIS.CheckMovable('right', group) AND THIS.CheckMovable('left', group) THEN
			1.5.1.119					IF effectState THEN pygame.mixer.Channel(0).play(sound) END IF
			1.5.1.120					THIS.UpdateColor((0, 0, 0), screen)
			1.5.1.121					<from numpy import rot90>
			1.5.1.122					SET THIS.struct TO rot90(THIS.struct)
			1.5.1.123					THIS.draw(screen)
			1.5.1.124				END IF
			1.5.1.125			END IF
			1.5.1.126		END PROCEDURE
			1.5.1.127
			1.5.1.128       <@staticmethod>
        	1.5.1.129		FUNCTION WillCollide(pygame.sprite.Sprite sprite, pygame.sprite.Sprite groupSprite, STRING dir) RETURNS BOOLEAN
			1.5.1.130			<import copy>
            1.5.1.131			spriteRect = copy.copy(sprite.rect)
            1.5.1.132			<match dir>
			1.5.1.133				<case 'down'> spriteRect.move_ip((0, 30))
			1.5.1.134				<case 'right'> spriteRect.move_ip((-30, 0))
			1.5.1.135				<case 'left'> spriteRect.move_ip((30, 0))
			1.5.1.136			
			1.5.1.137			IF spriteRect.colliderect(groupSprite) THEN RETURN TRUE END IF
			1.5.1.138
			1.5.1.139			RETURN FALSE
			1.5.1.140		END FUNCTION
			1.5.1.141
			1.5.1.142		<@staticmethod>
			1.5.1.143		FUNCTION reachedTop(pygame.Sprite.Group blockGroup) RETURNS BOOLEAN
			1.5.1.144			FOR EACH sprite IN blockGroup DO
			1.5.1.145				IF sprite.posY == 130 THEN RETURN TRUE END IF
			1.5.1.146				RETURN FALSE
			1.5.1.147			END FOR EACH
			1.5.1.148		END FUNCTION
			1.5.1.149
			1.5.1.150		<@staticmethod>
			1.5.1.151		FUNCTION CheckCompletedRow(pygame.sprite.Group blockGroup, pygame.Surface screen, BOOLEAN effectState, pygame.mixer.Sound sound) RETURNS BOOLEAN
			1.5.1.152			DECLARE gridList INITIALLY [
			1.5.1.153				[100, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.154    			[130, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.155    			[160, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.156    			[190, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.157    			[220, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.158    			[250, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.159    			[280, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.160    			[310, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.162  				[340, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.162   			[370, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.163   			[400, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.164  				[430, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.165   			[460, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.166   			[490, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.167   			[520, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.168   			[550, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.169   			[580, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.170   			[610, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.171   			[640, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
            1.5.1.172   			[670, [0, 0, 0, 0, 0, 0, 0, 0, 0]]
			1.5.1.173			]
			1.5.1.174
			1.5.1.175			FOR EACH block IN blockGroup.sprites() DO
			1.5.1.176				FOR j IN RANGE(LENGTH gridList) DO
			1.5.1.177					IF block.posY == gridList[j][0] THEN
			1.5.1.178						<match block.posX>
			1.5.1.179							<case 360> SET gridList[j][1][0] TO gridList[j][1][0] + 1 IF gridList[j][1][0] != 1 ELSE 0 END IF
			1.5.1.180							<case 390> SET gridList[j][1][1] TO gridList[j][1][1] + 1 IF gridList[j][1][1] != 1 ELSE 0 END IF
			1.5.1.181							<case 420> SET gridList[j][1][2] TO gridList[j][1][2] + 1 IF gridList[j][1][2] != 1 ELSE 0 END IF
			1.5.1.182							<case 450> SET gridList[j][1][3] TO gridList[j][1][3] + 1 IF gridList[j][1][3] != 1 ELSE 0 END IF
			1.5.1.183							<case 480> SET gridList[j][1][4] TO gridList[j][1][4] + 1 IF gridList[j][1][4] != 1 ELSE 0 END IF
			1.5.1.184							<case 510> SET gridList[j][1][5] TO gridList[j][1][5] + 1 IF gridList[j][1][5] != 1 ELSE 0 END IF
			1.5.1.185							<case 540> SET gridList[j][1][6] TO gridList[j][1][6] + 1 IF gridList[j][1][6] != 1 ELSE 0 END IF
			1.5.1.186							<case 570> SET gridList[j][1][7] TO gridList[j][1][7] + 1 IF gridList[j][1][7] != 1 ELSE 0 END IF
			1.5.1.187							<case 600> SET gridList[j][1][8] TO gridList[j][1][8] + 1 IF gridList[j][1][8] != 1 ELSE 0 END IF
			1.5.1.188							<case _> pass
			1.5.1.189						<end match>
			1.5.1.190					END IF
			1.5.1.191				END FOR 
			1.5.1.192			END FOR EACH
			1.5.1.193
			1.5.1.194			DECLARE row INITIALLY 0
			1.5.1.195
			1.5.1.196			FOR i IN RANGE(LENGTH gridList) DO
			1.5.1.197				DECLARE count INITIALLY 0
			1.5.1.198
			1.5.1.199				FOR j IN RANGE(LENGTH gridList[i][1]) DO
			1.5.1.200					SET count TO count + gridList[i][1][j]
			1.5.1.201					
			1.5.1.202					IF count >= 9 THEN
			1.5.1.203						RETURN Game.Block.RemoveCompletedRow(blockGroup, gridList, row, screen, effectState, sound)
			1.5.1.204					END IF
			1.5.1.205	
			1.5.1.206					SET row TO row + 1
			1.5.1.207
			1.5.1.208				END FOR
			1.5.1.209			END FOR
			1.5.1.210
			1.5.1.211			RETURN (False, gridList)
			1.5.1.212		END FUNCTION
			1.5.1.213
			1.5.1.214		<@staticmethod>
			1.5.1.215		FUNCTION RemoveCompletedRow(pygame.Sprite.Group blockGroup, ARRAY OF LISTS gridList, INTEGER rowPos, pygame.Surface screen, BOOLEAN effectState, pygame.mixer.Sound sound) RETURNS TUPLE
			1.5.1.216			FOR EACH rect IN blockGroup.sprites() DO
			1.5.1.217				IF rect.posY == gridList[rowPos][0] THEN
			1.5.1.218					SET rect.color TO (0, 0, 0)
			1.5.1.219					rect.draw(screen)
			1.5.1.220					blockGroup.remove(rect)
			1.5.1.221				END IF
			1.5.1.222
			1.5.1.223			END FOR EACH
			1.5.1.224
			1.5.1.225			FOR i IN RANGE(LENGTH gridList[rowPos][1]) DO
			1.5.1.226				IF gridList[rowPos][1][i] == 1 THEN
			1.5.1.227					gridList[rowPos][1][i] -= 1
			1.5.1.228				END IF
			1.5.1.229			END FOR
			1.5.1.230
			1.5.1.231			IF effectState THEN pygame.mixer.Channel(2).play(sound)
			1.5.1.232					
			1.5.1.233			FOR EACH rect IN blockGroup DO
			1.5.1.234				IF rect.posY < gridList[rowPos][0] THEN
			1.5.1.235					rect.UpdateColor((0, 0, 0), screen)
			1.5.1.236					rect.update((0, 30))
			1.5.1.237				END IF
			1.5.1.238			END FOR EACH
			1.5.1.239
			1.5.1.240			blockGroup.draw(screen)
			1.5.1.241
			1.5.1.242			RETURN TRUE
			1.5.1.243		END FUNCTION
			1.5.1.244 	END CLASS

		1.5.2 Rectangle Class
			1.5.2.1 CLASS RECTANGLE INHERITS pygame.sprite.Sprite WITH {TUPLE pos, TUPLE color, INTEGER size}
			1.5.2.2		CONSTRUCTOR(THIS, TUPLE pos, TUPLE color, INTEGER size)
			1.5.2.3			DECLARE THIS.posX, THIS.posY INITIALLY pos
			1.5.2.4			DECLARE THIS.size INITIALLY size
			1.5.2.5			DECLARE THIS.color INITIALLY color
			1.5.2.6			DECLARE THIS.rect INITIALLY pygame.Rect(THIS.posX, THIS.posY, THIS.size, THIS.size)
			1.5.2.7			DECLARE THIS.image INITIALLY pygame.Surface([THIS.size, THIS.size])
			1.5.2.8			THIS.image.fill(THIS.color)
			1.5.2.9		END CONSTRUCTOR
			1.5.2.10
			1.5.2.11	METHODS
			1.5.2.12
			1.5.2.13		PROCEDURE update(THIS, TUPLE dir)
			1.5.2.14			THIS.rect.move_ip(dir)
			1.5.2.15			SET THIS.posX, THIS.posY TO THIS.rect[0], THIS.rect[1]
			1.5.2.16		END PROCEDURE
			1.5.2.17
			1.5.2.18		PROCEDURE draw(THIS, pygame.Surface screen)
			1.5.2.19			pygame.draw.rect(screen, self.color, self.rect)
			1.5.2.20		END PROCEDURE
			1.5.2.21
			1.5.2.22		PROCEDURE UpdateColor(THIS, TUPLE color, pygame.Surface screen)
			1.5.2.23			DECLARE originalColor TO THIS.color
			1.5.2.24			SET THIS.color TO color
			1.5.2.25			THIS.draw(screen)
			1.5.2.26			SET THIS.color TO originalColor
			1.5.2.27		END PROCEDURE
			1.5.2.28	END CLASS

		1.5.3 LBlock Class
			1.5.3.1 CLASS LBlock INHERITS Block
			1.5.3.2		CONSTRUCTOR(THIS)
			1.5.3.3			<super().__init__(((0, 0, 0), (1, 0, 0), (1, 1, 1)), (255, 165, 0))>
			1.5.3.4		END CONSTRUCTOR
			1.5.3.5 END CLASS

		1.5.4 SquareBlock Class
			1.5.4.1 CLASS SquareBlock INHERITS Block
			1.5.4.2		CONSTRUCTOR(THIS)
			1.5.4.3			<super().__init__(((0, 0, 0), (1, 1, 0), (1, 1, 0)), (255, 255, 0))>
			1.5.4.4 	END CONSTRUCTOR
			1.5.4.5 END CLASS

		1.5.5 TBlock Class
			1.5.5.1 CLASS TBlock INHERITS Block
			1.5.5.2		CONSTRUCTOR(THIS)
			1.5.5.3			<super().__init__(((0, 0, 0), (0, 1, 0), (1, 1, 1)), (128, 0, 128))>
			1.5.5.4 	END CONSTRUCTOR
			1.5.5.5 END CLASS

		1.5.6 SBlock Class
			1.5.6.1 CLASS SBlock INHERITS Block
			1.5.6.2		CONSTRUCTOR(THIS)
			1.5.6.3			<super().__init__(((0, 0, 0), (0, 1, 1), (1, 1, 0)), (0, 128, 0))>
			1.5.6.4 	END CONSTRUCTOR
			1.5.6.5 END CLASS

		1.5.7 ZBlock Class
			1.5.7.1 CLASS ZBlock INHERITS Block
			1.5.7.2		CONSTRUCTOR(THIS)
			1.5.7.3			<super().__init__(((0, 0, 0), (1, 1, 0), (0, 1, 1)), (128, 0, 0))>
			1.5.7.4 	END CONSTRUCTOR
			1.5.7.5 END CLASS

		1.5.8 LineBlock Class
			1.5.8.1 CLASS LineBlock INHERITS Block
			1.5.8.2		CONSTRUCTOR(THIS)
			1.5.8.3			<super().__init__(((0, 0, 0, 0), (1, 1, 1, 1), (0, 0, 0, 0)), (0, 255, 255))>
			1.5.8.4 	END CONSTRUCTOR
			1.5.8.5 END CLASS

		1.5.9 JBlock Class
			1.5.9.1 CLASS JBlock INHERITS Block
			1.5.9.2		CONSTRUCTOR(THIS)
			1.5.9.3			<super().__init__(((0, 0, 0), (0, 0, 1), (1, 1, 1)), (0, 0, 255))>
			1.5.9.4 	END CONSTRUCTOR
			1.5.9.5 END CLASS

	1.6 GridRect Class
		1.6.1 CLASS GridRect INHERITS pygame.sprite.Sprite WITH {TUPLE pos, INTEGER size}
		1.6.3
		1.6.2 		CONSTRUCTOR(THIS, TUPLE pos, INTEGER size)
		1.6.3			DECLARE THIS.posX, THIS.posY INITIALLY pos
		1.6.4			DECLARE THIS.size INITIALLY size
		1.6.5			DECLARE THIS.color INITIALLY (200, 200, 200)
		1.6.6			DECLARE THIS.rect INITIALLY pygame.Rect(THIS.posX, THIS.posY, THIS.size, THIS.size)
		1.6.7			DECLARE THIS.image INITIALLY pygame.Surface([THIS.size, THIS.size])
		1.6.8		END CONSTRUCTOR
		1.6.9		
		1.6.10		PROCEDURE drawRect(THIS, SURFACE screen) RETURNS NONE
		1.6.11			pygame.draw.rect(screen, THIS.color, THIS.rect, 1)
		1.6.12		END PROCEDURE
		1.6.13	END CLASS

	1.7 Grid Class
		1.7.1 CLASS Grid INHERITS Game WITH {TUPLE gridSize}
		1.7.2		CONSTRUCTOR(THIS, TUPLE gridPos, TUPLE totalGridSize INITIALLY (630, 700))
		1.7.3			DECLARE THIS.posX, THIS.posY INITIALLY gridPos
		1.7.4			DECLARE THIS.blockSize INITIALLY 30
		1.7.5			DECLARE THIS.gridX, THIS.gridY INITIALLY totalGridSize
		1.7.6			DECLARE THIS.gridGroup INITIALLY pygame.sprite.Group()
		1.7.7		END CONSTRUCTOR
		1.7.8
		1.7.9		PROCEDURE DrawGrid(THIS, pygame.Surface screen)
		1.7.10			FOR x IN RANGE(THIS.posX, THIS.gridX, THIS.blockSize) DO
		1.7.11				FOR y IN RANGE(THIS.posY, THIS.gridY, THIS.blockSize) DO
		1.7.12					DECLARE gridBlock INITIALLY GridRect((x, y), THIS.blockSize)
		1.7.13					THIS.gridGroup.add(gridBlock)
		1.7.14					gridBlock.drawRect(screen)
		1.7.15				END FOR
		1.7.16			END FOR
		1.7.17		END PROCEDURE
		1.7.18 END CLASS

	1.8 Highscore Class
		1.8.1 CLASS Highscore IS {}
		1.8.2		CONSTRUCTOR(STRING name INITIALLY 'PLA', INTEGER score INITIALLY 0)
		1.8.3			DECLARE self.name INITIALLY name
		1.8.4			DECLARE self.score INITIALLY score
		1.8.5		END CONSTRUCTOR
		1.8.6
		1.8.7 		METHODS
		1.8.8	
		1.8.9			FUNCTION BubbleSortScores(THIS, LIST scoresList) RETURNS ARRAY OF LISTS
		1.8.10				scoreList.append(Highscore(THIS.name, THIS.score))
		1.8.11				
		1.8.12				FOR i IN RANGE(LENGTH scoresList) DO
		1.8.13					FOR j IN RANGE(LENGTH scoresList - i - 1) DO
		1.8.14						IF scoresList[j+1].score > scoresList[j].score THEN
		1.8.15							SET scoresList[j], scoresList[j+1] TO scoresList[j+1], scoresList[j]
		1.8.16						END IF
		1.8.17					END FOR
		1.8.18				END FOR
		1.8.19
		1.8.20				RETURN [[score.name, score.score] FOR EACH score IN scoreList END FOR]
		1.8.21			END FUNCTION
		1.8.22
		1.8.23			<@staticmethod>
		1.8.24			FUNCTION GetScoresFromFile(STRING filePath) RETURNS LIST
		1.8.25				<from .utils.ClrTerminal import Color>
		1.8.26
		1.8.27				TRY
		1.8.28					<open score file as f>
		1.8.29						DECLARE data INITIALLY f.read().split(',')
		1.8.30
		1.8.31					DECLARE names, scores INITIALLY [], []
		1.8.32
		1.8.33					FOR EACH value IN data DO
		1.8.34						TRY scores.append(int(value))
		1.8.35						EXCEPT ValueError: names.append(value)
		1.8.36					END FOR
		1.8.37
		1.8.38					DECLARE highscores INITIALLY [Highscore(name, score) FOR EACH name, score IN zip(names, scores) END FOR]
		1.8.39
		1.8.40					Color.prints(f'Successfully Retrieved Score data from {filePath}')
		1.8.41					RETURN highscores
		1.8.42
		1.8.43				EXCEPT Exception as e
		1.8.44					Color.printe(f'Unexpected Error Occurred during data retrieval\n{e}')
		1.8.45					RETURN []
		1.8.46				END TRY
		1.8.47			END FUNCTION
		1.8.48
		1.8.49			<@staticmethod>
		1.8.50			FUNCTION WriteScoresToFile(STRING filePath, LIST scores) RETURNS BOOLEAN
		1.8.51				<from src.utils.ClrTerminal import Color>
		1.8.52			
		1.8.53				SET scores TO Highscore.CheckForDupes(score)
		1.8.52
		1.8.53				TRY
		1.8.54					<open score file as f>
		1.8.55 						FOR EACH score IN scores DO 
		1.8.56							IF score == ['DEV', 100000] or score == ['PLA', 0] THEN pass
		1.8.57							ELSE f.write(f'{score.name},{score.score},') END IF
		1.8.57						END FOR
		1.8.58						
		1.8.59					Color.prints(f'Successfully written scores to {filePath}')
		1.8.60					RETURN TRUE
		1.8.61
		1.8.62				EXCEPT Exception as e
		1.8.63					Color.printe(f'Unexpected Error occurred whilst writing scores to {filePath}\n{e}')
		1.8.64					RETURN FALSE
		1.8.65				END TRY
		1.8.66			END FUNCTION
		1.8.67
		1.8.68			FUNCTION CheckForDupes(ARRAY OF LISTS scores) RETURNS ARRAY of LISTS
		1.8.69				DECLARE arr INITIALLY []
		1.8.70		
		1.8.71				FOR i IN RANGE(LENGTH scores) DO
		1.8.72					IF scores[i] != scores[i-1] THEN
		1.8.73						arr.append(scores[i])
		1.8.73					END IF
		1.8.74				END FOR
		1.8.75				
		1.8.76				RETURN arr
		1.8.77			END FUNCTION
		1.8.78
		1.8.79			<@staticmethod>
		1.8.80 			FUNCTION CommitToDb(LIST scores) RETURNS LIST OF TUPLES
		1.8.81				<from src.utils.ClrTerminal import Color>
		1.8.82				<import pyodbc as dbc>
		1.8.83
		1.8.84				DECLARE topScores INITIALLY []
		1.8.85
		1.8.86				TRY
		1.8.87		            Color.printd('Please Wait Whilst The Program Attempts to connect to the database, this could take some time...')
        1.8.88					Color.printd('WARNING: This May Cause an Error Message if you do not have an SQL Server Active')
		1.8.89					DECLARE conn_str INITIALLY f'''DRIVER=SQL SERVER;SERVER={SERVER_NAME};DATABASE=highscores;Trust_Connection=yes;'''
		1.8.90
		1.8.91					DECLARE conn INITIALLY dbc.connect(conn_str)
		1.8.92					DECLARE cursor INITIALLY conn.cursor()
		1.8.93
		1.8.94					Color.prints('Successfully Connected to the Database!')
        1.8.95					Color.printd('Attempting to Commit Data...')
		1.8.96
		1.8.97					cursor.execute('TRUNCATE TABLE highscore;')
		1.8.98					
		1.8.99					DECLARE ins_query INITIALLY f'''INSERT INTO highscore (name, score) VALUES (?, ?);'''
		1.8.100					FOR EACH name, score IN scores DO cursor.execute(ins_query, (name, score)) END FOR
		1.8.101				
		1.8.102					conn.commit()
		1.8.103					Color.prints('Committed Data to Database Successfully')
		1.8.104					Color.printd('Attempting to Retrieve Committed Data from Database...')
		1.8.105
		1.8.106					TRY
		1.8.107						DECLARE data INITIALLY cursor.execute('SELECT * FROM highscore;')
		1.8.108
		1.8.109						SET topScores TO [(name, score) FOR EACH name, score IN data END FOR]
		1.8.110						Color.prints('Successfully retrieved score data from database')
		1.8.111
		1.8.112						conn.close()
		1.8.113			
		1.8.114						Color.prints(f'Data: {topScores}')
		1.8.115						RETURN topScores
		1.8.116					EXCEPT Exception as e Color.printe(f'Error whilst trying to retrieve score data\n{e}')
		1.8.117					END TRY
		1.8.118				EXCEPT Exception as e Color.printe(f'Error: There was an unexpected error whilst trying to commit data to the sql database\n{e}')
		1.8.119				END TRY
		1.8.120			END FUNCTION
		1.8.121	END CLASS

2. Solo Files

	2.1 Main

		<imports>
		<from src.utils.ClrTerminal import Color>
		<from src.run import run>

		2.1.1 IF __name__ == '__main__' THEN
		2.1.2	Color.printd('Loading Netris...')
		2.1.3	run() # Run Game Using Main Window Surface for GUI Drawing
		2.1.4 END IF
		2.1.5 END FILE

	2.2 Home

		<imports>
		<from src.classes import necessary classes>
		<from pages import necessary run functions>
		<import pygame library>

		2.2.1 pygame.init()
		2.2.2 pygame.event.set_allowed([pygame.QUIT])
		2.2.3
		2.2.4 DECLARE clock, settings INITIALLY pygame.time.Clock() AND Settings()
		2.2.5
		2.2.6 # List of GUI Objects
		2.2.7 DECLARE GUIObjects INITIALLY AS ARRAY of OBJECT [
		2.2.8		Text([480, 90], 'Netris', 106),
		2.2.9		Btn('New Game', [480, 310], 230, 41, 32),
		2.2.10		Btn('Instructions', [480, 360], 300, 41, 32),
		2.2.11		Btn('Settings', [480, 410], 200, 41, 32),
		2.2.12		Btn('Developer Mode', [480, 650], 210, 41, 16),
		2.2.13		Btn('Exit Game', [480, 460], 235, 41, 32)
		2.2.14 ]
		2.2.15
		2.2.16 PROCEDURE run() RETURNS NONE
		2.2.17
		2.2.18		settings.init()
		2.2.19		DECLARE win INITIALLY Window('Netris - Main Menu', (0, 0, 0)) # Instantiate Window Object
		2.2.20		win.CreateNewWindow() # Create New Window 
		2.2.21		
		2.2.22		win.drawGUIObjs(GUIObjects) # Draw the GUI
		2.2.23
		2.2.24 		# While the game is running
		2.2.25		WHILE 1 DO
		2.2.26			GUIObjects[1].isHovering(GameRun, settings.effectState) # Used to navigate to a New Game Page
		2.2.27			GUIObjects[2].isHovering(InstructionsRun, settings.effectState) # Used to navigate to Instructions Page
		2.2.28			GUIObjects[3].isHovering(SettingsRun, settings.effectState) # Used to navigate to Settings Page
		2.2.29			GUIObjects[4].isHovering(DevRun, settings.effectState) # Used to Exit the game
		2.2.30			GUIObjects[-1].isHovering(win.ExitWindow, settings.effectState)
		2.2.31
		2.2.32			FOR EACH event IN pygame.event.get() DO
		2.2.33				IF (event.type == pygame.KEYDOWN AND event.type == pygame.K_ESCAPE) OR event.type == pygame.QUIT THEN
		2.2.34					win.ExitWindow()
		2.2.35				END IF
		2.2.36
		2.2.37			pygame.display.update()
		2.2.38			clock.tick(30)
		2.2.39		END WHILE
		2.2.40	END PROCEDURE
		2.2.41 END FILE

	2.3 Instructions

		<imports>
		<from src.classes import necessary classes>
		<import pygame library>

		2.3.1 pygame.init()
		2.3.2 pygame.event.set_allowed([pygame.QUIT])
		2.3.3 DECLARE clock, settings INITIALLY pygame.time.Clock() AND Settings()
		2.3.4
		2.3.5 # List of GUI Objects
		2.3.6 DECLARE GUIObjects INITIALLY [
		2.3.7		Text([480, 40], 'Instructions', 48),
        2.3.8  		Text([480, 100], 'Stack blocks to create a full horizontal line', 20),
        2.3.9		Text([320, 140], 'clearing them to earn points', 20),
        2.3.10		Text([447, 220], 'If the blocks reach the top of the screen,', 20),
        2.3.11		Text([119, 260], 'you lose!', 20),
        2.3.12
        2.3.13		Text([480, 320], 'How to Play', 32),
        2.3.13		Text([381, 380], '- Use the ↑ key to rotate the block', 20),
        2.3.14 		Text([410, 430], '- Use the ← & → keys to move the block', 20),
        2.3.15		Text([480, 470], '- Use the ↓ key to move the block down faster', 20),
        2.3.16		Text([480, 535], 'Have Fun Playing!', 20),
        2.3.17		Btn('Main Menu', [480, 620], 300, 48, 32)
		2.3.18 ]
		2.3.19
		2.3.20	PROCEDURE InstructionsRun() RETURNS NONE
		2.3.21		DECLARE win INITIALLY Window('Netris - Instructions', (0, 0, 0))
		2.3.22		win.CreateNewWindow()
		2.3.23
		2.3.24		win.drawGUIObjs(GUIObjects)
		2.3.25		settings.init()
		2.3.26			
		2.3.27		# While the game is running
		2.3.28		WHILE 1 DO
		2.3.29			GUIObjects[-1].isHovering(win.Leave, settings.effectState)
		2.3.30			IF pygame.event.get(pygame.QUIT) THEN win.ExitWindow() END IF
		2.2.31
		2.2.32			pygame.display.update()
		2.2.33			clock.tick(30)
		2.2.34		END WHILE
		2.2.35	END PROCEDURE
		2.2.36 END FILE

	2.4 Settings

		<imports>
		<from src.classes import necessary classes>
		<from utils import necessary classes>
		<import pygame library>
	
		2.4.1 pygame.init()
		2.4.2 pygame.event.set_allowed([pygame.QUIT])
		2.4.3 DECLARE clock, settings INITIALLY pygame.time.Clock() AND Settings()
		2.4.4
		2.4.5 DECLARE GUIObjects INITIALLY ARRAY OF OBJECT [Text([480, 90], 'Settings', 69),
        2.4.6 		Btn('Music: Off', [480, 260], 330, 48, 32),
        2.4.7    	Btn('Sound Effects: Off', [480, 360], 580, 48, 32),
        2.4.8		Btn('Main Menu', [480, 520], 300, 48, 32)
		2.4.9 ]
		2.4.10
		2.4.11	PROCEDURE ChangeMusicState()
		2.4.12		GUIObjects[1].ChangeState('Music: On', True) IF NOT settings.musicState ELSE GUIObjects[1].ChangeState('Music: Off', False) END IF
		2.4.13		settings.ChangeSettings(True) IF NOT settings.musicState ELSE settings.ChangeSettings(False) END IF
		2.4.14		Color.prints(f'Toggled Music ({settings.musicState})')
		2.4.15	END PROCEDURE
		2.4.16
		2.4.17	PROCEDURE ChangeEffectsState()
    	2.4.18		GUIObjects[2].ChangeState('Sound Effects: On', True) IF NOT settings.effectState ELSE GUIObjects[2].ChangeState('Sound Effects: Off', False) END IF
    	2.4.19		settings.ChangeSettings(None, True) if not settings.effectState ELSE settings.ChangeSettings(None, False) END IF
		2.4.20		Color.prints(f'Toggled SE ({settings.effectState})')
		2.4.21	END PROCEDURE
		2.4.22
		2.4.23 	PROCEDURE OnRun()
		2.4.24		settings.init()
		2.4.25		GUIObjects[1].ChangeState('Music: On', True) IF settings.musicState ELSE GUIObjects[1].ChangeState('Music: Off', False) END IF
    	2.4.26		GUIObjects[2].ChangeState('Sound Effects: On', True) IF settings.effectState ELSE GUIObjects[2].ChangeState('Sound Effects: Off', False) END IF
		2.4.27	END PROCEDURE
		2.4.28
		2.4.29	PROCEDURE SettingsRun
		2.4.30		DECLARE win INITIALLY Window('Netris - Settings', (0, 0, 0))
		2.4.31		win.CreateNewWindow()
		2.4.32
		2.4.33 		win.drawGUIObjs(GUIObjects)
    	2.4.34		OnRun()
		2.4.35
		2.4.36		WHILE 1 DO
		2.4.37				
		2.4.38			GUIObjects[1].isHovering(ChangeMusicState, settings.effectState)
		2.4.39			GUIObjects[2].isHovering(ChangeEffectState, settings.effectState)
		2.4.40			GUIObjects[-1].isHovering(win.Leave, settings.effectState)
		2.4.41			
		2.4.42			pygame.mixer.Channel(0).set_volume(.2) IF settings.effectState ELSE pygame.mixer.Channel(0).set_volume(0) END IF
		2.4.43			pygame.mixer.Channel(1).set_volume(1) IF settings.musicState ELSE pygame.mixer.Channel(1).set_volume(0) END IF
		2.4.44
		2.4.45			IF pygame.event.get(pygame.QUIT) THEN win.ExitWindow() END IF
		2.4.46		
		2.4.47			pygame.display.update()
		2.4.48			clock.tick(30)
		2.4.49		END WHILE
		2.4.50	END PROCEDURE
		2.4.51 END FILE

	2.5 Game
		
		<imports>
		<from .classes import necessary classes>
		<from utils import necessary classes>
		<from pathlib import Path>
		<import pygame library>

		2.5.1 pygame.init()
		2.5.2 pygame.event.set_allowed([pygame.QUIT, pygame.KEYDOWN, pygame.KEYUP])
		2.5.3 DECLARE clock, settings INITIALLY (pygame.time.Clock(), Settings()) # Games Clock (Frames Per Second) & Initialise Settings
		2.5.4
		2.5.5 DECLARE GUIObjects INITIALLY [
		2.5.6		Text([495, 60], 'Netris', 40) # Title Text
		2.5.7		Text([173, 144], 'Controls', 32), # Controls Header
        2.5.8 		Text([135, 180], '↑ Rotate', 20),
    	2.5.9		Text([164, 212], '← Move Left', 20),
		2.5.10		Text([175, 240], '→ Move Right', 20),
		2.5.11		Text([165, 272], '↓ Move Down', 20),
		2.5.12		Text([165, 300], '[Esc] Exit Game', 20),
		2.5.13		Text([800, 144], 'Score', 40), # Score Header
		2.5.14		Text([800, 200], '0', 36)
		2.5.15 ]
		2.5.16
		2.5.17 DECLARE rotateBlockSound, lineClearSound, moveBlockSound, scoreSound, failSound INITIALLY (
    	2.5.18 		pygame.mixer.Sound(f'{str(Path(__file__).parents[0])}\\resources\\sounds\\rotateBlock.wav'), 
    	2.5.19		pygame.mixer.Sound(f'{str(Path(__file__).parents[0])}\\resources\\sounds\\lineClear.wav'), 
    	2.5.20		pygame.mixer.Sound(f'{str(Path(__file__).parents[0])}\\resources\\sounds\\moveBlock.wav'),
    	2.5.21		pygame.mixer.Sound(f'{str(Path(__file__).parents[0])}\\resources\\sounds\\scoreSound.wav'),
    	2.5.22		pygame.mixer.Sound(f'{str(Path(__file__).parents[0])}\\resources\\sounds\\failSound.wav')
		2.5.23 )
		2.5.24
		2.5.25 PROCEDURE GameRun() RETURNS NONE
		2.5.26	pygame.mouse.set_visible(False)
		2.5.27	Color.printd('Entering Game...')
		2.5.28		
		2.5.29	DECLARE gridList INITIALLY [
    	2.5.30		[100, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.31      [130, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.32      [160, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.33      [190, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.34      [220, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.35      [250, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.36      [280, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.37		[310, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.38      [340, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.39      [370, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.40      [400, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.41      [430, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.42      [460, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.43      [490, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.44      [520, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.45      [550, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.46      [580, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.47      [610, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.48      [640, [0, 0, 0, 0, 0, 0, 0, 0, 0]],
		2.5.49      [670, [0, 0, 0, 0, 0, 0, 0, 0, 0]]
		2.5.50 	]
		2.5.51	
		2.5.52	DECLARE win INITIALLY Window('Netris - Game', (0, 0, 0))
		2.5.53	win.CreateNewWindow()
		2.5.54
		2.5.55	settings.init()
		2.5.56	
		2.5.57	pygame.mixer.Channel(1).play(pygame.mixer.Sound(f'{str(Path(__file__).parents[0])}\\resources\\sounds\\tetris.wav'), -1) # Play music in infinite loop
    	2.5.58	pygame.mixer.Channel(1).set_volume(.2) IF settings.musicState ELSE pygame.mixer.Channel(1).set_volume(0) END IF # if music settings off, then turn off the music otherwise play the music 
		2.5.59
		2.5.60	DECLARE block INITIALLY Game.Block.GetRandBlock()
		2.5.61	block.draw(win.win)
		2.5.62
		2.5.63 	DECLARE speed, mult, score, limit INITIALLY [0, 1, 0, 500]
		2.5.64
		2.5.65 	# prevents overlap of text
		2.5.66 	GUIObjects[-1].UpdateText((0, 0, 0), str(score)) # Update Score Count
		2.5.67 	
		2.5.68	DECLARE bottomBlocks INITIALLY pygame.sprite.Group()
		2.5.69	
		2.5.70	DECLARE grid INITIALLY Grid(((720 // 2), 100))
		2.5.71	grid.DrawGrid(win.win)
		2.5.72	
		2.5.73	win.drawGUIObjs(GUIObjects)
		2.5.74	
		2.5.75	WHILE 1 DO
		2.5.76		grid.DrawGrid(win.win)
		2.5.77	
		2.5.78		FOR EACH event IN pygame.event.get() DO
		2.5.79			IF event.type == pygame.QUIT THEN win.ExitWindow() END IF
		2.5.80			IF event.type == pygame.KEYDOWN THEN
		2.5.81				<match event.key>
		2.5.82					<case pygame.K_ESCAPE>
		2.5.83						pygame.mixer.Channel(1).stop()
		2.5.84						pygame.mouse.set_visible(True)
		2.5.85						win.Leave()
		2.5.86
		2.5.87					<case pygame.K_UP>
		2.5.88						block.Rotate(win.win, settings.effectState, rotateBlockSound, bottomBlocks)
		2.5.89
		2.5.90					<case pygame.K_DOWN>
		2.5.91						block.Move(win.win, 'down', settings.effectState, moveBlockSound)
		2.5.92
		2.5.93					<case pygame.K_RIGHT>
		2.5.94						IF block.CheckMovable('right', bottomBlocks) THEN
		2.5.95							block.Move(win.win, 'right', settings.effectState, moveBlockSound)
		2.5.96						END IF
		2.5.97
		2.5.98					<case pygame.K_LEFT>
		2.5.99						IF block.CheckMovable('left', bottomBlocks) THEN
		2.5.100							block.Move(win.win, 'left', settings.effectState, moveBlockSound)
		2.5.101						END IF
		2.5.102
		2.5.103					<case _> pass
		2.5.104				<end match>
		2.5.105			END IF
		2.5.106		END FOR
		2.5.107
		2.5.108		IF speed * mult >= 30 THEN
		2.5.109			block.Move(win.win, 'down', settings.effectState, moveBlockSound)
		2.5.110			speed = 0
		2.5.111		END IF
		2.5.112		
		2.5.113		IF block.CheckCollision(bottomBlocks, 'down') THEN
		2.5.114			bottomBlocks.add(block.group)
		2.5.115
		2.5.116			SET block TO Game.Block.GetRandBlock()
		2.5.117			block.draw(win.win)
		2.5.118			IF settings.effectState THEN pygame.mixer.Channel(2).play(scoreSound) END IF
		2.5.119			
		2.5.120			SET score TO score + 50
		2.5.121			
		2.5.122			IF score >= limit THEN
		2.5.123				SET mult TO mult + 1
		2.5.124				SET limit TO limit + 1000
		2.5.125			END IF
		2.5.126		
		2.5.127			GUIObjects[-1].UpdateText((0, 0, 0), str(score))
		2.5.128
		2.5.129			IF block.reachedTop(bottomBlocks) THEN
		2.5.130				Color.prints('Reached Top of Screen')
		2.5.131				<from .scoreInput import InputRun>
		2.5.132				pygame.mouse.set_visible(True)
		2.5.133				IF settings.effectState THEN pygame.mixer.Channel(0).play(failSound) END IF
		2.5.134				pygame.mixer.Channel(1).stop()
		2.5.135				InputRun(score)
		2.5.136			END IF
		2.5.137
		2.5.138			DECLARE complete, gridList INITIALLY block.CheckCompletedRow(bottomBlocks, gridList, win.win, settings.effectState, lineClearSound)
		2.5.139
		2.5.140			WHILE complete DO
		2.5.141				SET score TO score + 100
		2.5.142				GUIObjects[-1].UpdateText((0, 0, 0), str(score))
		2.5.143		
		2.5.144				SET complete, gridList TO block.CheckCompletedRow(bottomBlocks, gridList, win.win, settings.effectState, lineClearSound)
		2.5.145			END WHILE
		2.5.146			
		2.5.147			pygame.display.update()
		2.5.148			clock.tick(30)
		2.5.149			SET speed TO speed + 1
		2.5.150		END WHILE
		2.5.151 END PROCEDURE
		2.5.152 END FILE

	2.6 ScoreInput
		
		<imports>
		<from src.classes import necessary classes>
		<from utils import necessary classes>
		<import pygame library>

		2.6.1 pygame.init()
		2.6.2 pygame.event.set_allowed([pygame.KEYDOWN, pygame.TEXTINPUT])
		2.6.3 
		2.6.4 DECLARE clock, settings INITIALLY (pygame.time.Clock(), Settings())
		2.6.5 disallowedKeys = [chr(key) FOR key IN RANGE(0, 255) IF NOT chr(key).isalpha() END IF END FOR]
		2.6.6
		2.6.7 DECLARE GUIObjects INITIALLY [
		2.6.8 		Text([480, 90], 'Netris', 106),
    	2.6.9		Text([480, 210], 'Enter Name', 48), 
		2.6.10		Text([480, 320], 'PLA', 48),
		2.6.11		Btn('Enter', [480, 440], 300, 48, 48)
		2.6.12 ]
		2.6.13
		2.6.14 PROCEDURE InputRun(INTEGER score INITIALLY 0)
		2.6.15		settings.init()
		2.6.16		DECLARE allowedClick INITIALLY FALSE
		2.6.17		
		2.6.18		DECLARE win INITIALLY Window('Netris - Score Input', (0, 0, 0))
		2.6.19		win.CreateWindow()
		2.6.20		win.drawGUIObjs(GUIObjects)
		2.6.21
		2.6.22		WHILE 1 DO
		2.6.23			<from highscores import RunHighscore>
		2.6.24			IF allowedClick THEN
		2.6.25				GUIObjects[-1].isHovering(RunHighscore, settings.effectState, (255, 0, 0), GUIObjects[2].caption[:3], score) 
		2.6.26			ELSE
		2.6.27				GUIObjects[-1].isHovering(InputRun, settings.effectState, (128, 128, 128))
		2.6.28			END IF
		2.6.29
		2.6.30			IF LENGTH GUIObjects[2].caption == 3 THEN SET allowedClick TO TRUE END IF
		2.6.31			IF LENGTH GUIObjects[2].caption < 3 THEN SET allowedClick TO FALSE END IF
		2.6.32			
		2.6.33			IF LENGTH GUIObjects[2].caption > 3 THEN
		2.6.34				SET allowedClick TO FALSE
		2.6.35			    Color.printe('Exceeded Character Limit')
        2.6.36				GUIObjects[2].UpdateText((0, 0, 0), GUIObjects[2].caption[:3])
		2.6.37			END IF
		2.6.38
		2.6.39			FOR EACH event IN pygame.event.get() DO
		2.6.40				IF event.type == pygame.KEYDOWN THEN
		2.6.41					IF event.key == pygame.K_BACKSPACE THEN
		2.6.42						GUIObjects[2].UpdateText((0, 0, 0), GUIObjects[2].caption[:-1])
		2.6.43					END IF
		2.6.44					
		2.6.45					IF event.key == pygame.K_RETURN OR event.key == pygame.K_KP_ENTER THEN
		2.6.46						IF allowedClick THEN RunHighscore(GUIObjects[2].caption[:3], score) END IF
		2.6.47					END IF
		2.6.48				END IF
		2.6.49
		2.6.50				IF event.type == pygame.TEXTINPUT THEN
		2.6.51					IF event.text NOT IN disallowedKeys THEN
		2.6.52						IF GUIObjects[2].caption == 'PLA' THEN GUIObjects[2].UpdateText((0, 0, 0), event.text) 
		2.6.52						ELSE GUIObjects[2].UpdateText((0, 0, 0), GUIObjects[2].caption + event.text) 
		2.6.53						END IF
		2.6.54
		2.6.55					ELSE Color.printe(f'Error: Illegal Character "{event.text}"')
		2.6.56					END IF
		2.6.57				END IF
		2.6.58			END FOR
		2.6.59			
		2.6.60			pygame.display.update()
		2.6.61			clock.tick(30)
		2.6.62 		END WHILE
		2.6.63 END PROCEDURE
		2.6.64 END FILE

	2.7 Highscore
		<imports>
		<from classes import necessary classes>
		<from pages import necessary procedures>
		<from pathlib import Path>
		<import pygame library>

		2.7.1 pygame.init()
		2.7.2 pygame.event.set_allowed([pygame.QUIT])
		2.7.3 DECLARE clock, settings INITIALLY (pygame.time.Clock(), Settings())
		2.7.4
		2.7.5 FUNCTION InitialiseGUI(STRING name, INTEGER score) RETURNS LIST
		2.7.6 		DECLARE scores INITIALLY []
		2.7.7		
		2.7.8		DECLARE GUIObjects INITIALLY [
		2.7.9			Text([480, 90], 'Netris', 106),
    	2.7.10			Btn('Main Menu', [720, 600], 300, 48, 32),
        2.7.11			Btn('New Game', [240, 600], 300, 48, 32)
		2.7.12 ]
		2.7.13
		2.7.14		DECLARE userScore INITIALLY Highscore(name, score)
		2.7.15		DECLARE scores INITIALLY userScore.BubbleSortScores(userScore.GetScoresFromFile(f'{str(Path(__file__).parents[1])}\\scores.txt'))
		2.7.16		userScore.WriteScoresToFile(f'{str(Path(__file__).parents[1])}\\scores.txt', scores)
		2.7.17	
		2.7.18		SET scores TO scores[:5]
		2.7.19		SET height TO 140
		2.7.20
		2.7.21		FOR i IN RANGE(LENGTH scores) DO
		2.7.22			SET height TO height + 60
		2.7.23			GUIObjects.append(Text([480, height], f'{scores[i][0]}: {scores[i][1]}', 36))
		2.7.24
		2.7.25		GUIObjects.append(Text([480, height+80], 'HIGHSCORE!' if score >= scores[0][1] else '', 36))
		2.7.26	
		2.7.27		RETURN GUIObjects
		2.7.28 END FUNCTION
		2.7.29
		2.7.30 PROCEDURE RunHighscore(TUPLE user INITIALLY ('PLA', 0)) RETURNS NONE
		2.7.31		DECLARE name, score INITIALLY user
		2.7.32
		2.7.32		settings.init()
		2.7.33		DECLARE GUIObjects INITIALLY InitialiseGUI(name, score)
		2.7.34		
		2.7.35		DECLARE win INITIALLY Window('Netris - Highscores', (0, 0, 0))
		2.7.36		win.CreateNewWindow()
		2.7.37
		2.7.38		win.drawGUIObjs(GUIObjects)
		2.7.39
		2.7.40		WHILE 1 DO
		2.7.41			GUIObjects[1].isHovering(win.Leave, settings.effectState)
        2.7.42			GUIObjects[2].isHovering(GameRun, settings.effectState)
        2.7.43
		2.7.44			if pygame.event.get(pygame.QUIT): win.ExitWindow()
        2.7.45      
        2.7.46			game.display.update() # Update the display
        2.7.47			clock.tick(30) # Set the game's frame rate to 30 FPS
		2.7.48		END WHILE
		2.7.49	END PROCEDURE
		2.7.50  END FILE

3. Utilities

	3.1 ClrTerminal
		3.1.1 CLASS Color IS {}
		3.1.2	
		3.1.3	# Foreground Colors
		3.1.4	DECLARE FORE_BLACK INITIALLY STRING '\x1b[30m'
		3.1.5	DECLARE FORE_RED INITIALLY STRING '\x1b[31m'
		3.1.6	DECLARE FORE_GREEN INITIALLY STRING '\x1b[32m'
		3.1.7	DECLARE FORE_YELLOW INITIALLY STRING '\x1b[33m'
		3.1.8	DECLARE FORE_BLUE INITIALLY STRING '\x1b[34m'
		3.1.9	DECLARE FORE_MAGENTA INITIALLY STRING '\x1b[35m'
		3.1.10	DECLARE FORE_CYAN INITIALLY STRING '\x1b[36m'
		3.1.11	DECLARE FORE_WHITE INITIALLY STRING '\x1b[37m'
		3.1.12	DECLARE FORE_ORANGE INITIALLY STRING '\x1b[38;5;208m'
		3.1.13
		3.1.14	# Background Colors
		3.1.15	DECLARE BACK_BLACK INITIALLY '\x1b[40m'
		3.1.16	DECLARE BACK_RED INITIALLY '\x1b[41m'
		3.1.17	DECLARE BACK_GREEN INITIALLY '\x1b[42m'
		3.1.18	DECLARE BACK_YELLOW INITIALLY '\x1b[43m'
		3.1.19	DECLARE BACK_BLUE INITIALLY '\x1b[44m'
		3.1.20	DECLARE BACK_MAGENTA INITIALLY '\x1b[45m'
		3.1.21	DECLARE BACK_CYAN INITIALLY '\x1b[46m'
		3.1.22	DECLARE BACK_WHITE INITIALLY '\x1b[47m'
		3.1.23
		3.1.24
		3.1.25	DECLARE RESET INITIALLY '\003[0m'
		3.1.26
		3.1.27	METHODS
		3.1.28
		3.1.29		PROCEDURE ClrPrint(STRING clr, STRING txt, BOOLEAN isBack, BOOLEAN reset) RETURNS NONE
		3.1.30			# Prints Colored Text to the Terminal
		3.1.31
		3.1.32				<match clr> # Checks for the color name
		3.1.33					<case 'white'> print(f'{DO Color.BACK_WHITE IF isBack ELSE Color.FORE_WHITE END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.34					<case 'black'> print(f'{DO Color.BACK_BLACK IF isBack ELSE Color.FORE_BLACK END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.35					<case 'red'> print(f'{DO Color.BACK_RED IF isBack ELSE Color.FORE_RED END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.36					<case 'green'> print(f'{DO Color.BACK_GREEN IF isBack ELSE Color.FORE_GREEN}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.37					<case 'yellow'> print(f'{DO Color.BACK_YELLOW IF isBack ELSE Color.FORE_YELLOW END IF}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.38					<case 'blue'> print(f'{DO Color.BACK_BLUE IF isBack ELSE Color.FORE_BLUE}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.39					<case 'magenta'> print(f'{DO Color.BACK_MAGENTA IF isBack ELSE Color.FORE_MAGENTA}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.40					<case 'cyan'> print(f'{DO Color.BACK_CYAN IF isBack ELSE Color.FORE_CYAN}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.41					<case 'orange'> print(f'{DO "" IF isBack ELSE Color.FORE_CYAN}{txt}{DO Color.RESET IF reset ELSE "" END IF}')
		3.1.42					<case _> print(txt)
		3.1.43				<end match>
		3.1.44		END PROCEDURE
		3.1.45
		3.1.46		PROCEDURE printd(STRING str INITIALLY ''):
		3.1.47			'''Debug Printing'''
		3.1.48			print(f'{Color.FORE_ORANGE}{txt}{Color.RESET}')
		3.1.49		END PROCEDURE
		3.1.50
		3.1.51		PROCEDURE printe(STRING str INITIALLY ''):
		3.1.52			'''Error Printing'''
		3.1.53			print(f'{Color.FORE_RED}{txt}{Color.RESET}')
		3.1.54		END PROCEDURE
		3.1.55
		3.1.56		PROCEDURE prints(STRING str INITIALLY ''):
		3.1.57			'''Success Printing'''
		3.1.58			print(f'{Color.FORE_GREEN}{txt}{Color.RESET}')
		3.1.59		END PROCEDURE
		3.1.60	END CLASS