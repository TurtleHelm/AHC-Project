# Classes
	1.1 Window Class
	1.2 Text Class
	1.3 Btn Class
	1.4 Settings Class
	1.5 Game Class

# Solo Files
	2.1 Main
	2.2 Home
	2.3 Instructions
	2.4 Settings
	2.5 game

3. Utilities
	3.1 ClrTerminal

1. Classes

	1.1 Window Class
		1.1.1 initialise window class
		1.1.2 initialise necessary values for window class
		1.1.3 create procedure that creates a new window object and updates screen
		1.1.4 create function that returns the window surface
		1.1.5 create procedure that exits the program
		1.1.6 create procedure that instantiates objects onto the screen and updates window (i.e text)

	1.2 Text Class
		1.2.1 initialise Text class
		1.2.2 initialise necessary values for text class
		1.2.3 create procedure called RenderText that renders text to the window
		1.2.4 create a procedure called ChangeText that changes the text on the screen and redraws it
		1.2.5 create a procedure called ChangeColor that changes the color of the text and redraws it
		1.2.6 create a function called ReturnText that returns the text value of the object

	1.3 Btn Class
		1.3.1 initialise Btn class
		1.3.2 initialise necessary values for btn class
		1.3.3 create a procedure called ChangeState that changes the buttons state and changes btn color accordingly
		1.3.4 create a procedure called isHovering to check for mouse hover event and play sound effect & change color if hovering otherwise reset btn color
		1.3.5 create a procedure called HasClicked to check for click event, play sound effect and change windows if clicked
		1.3.6 create a procedure called RenderBtn to render the btn to the window
		1.3.7 create a procedure called DrawBtn to draw the btn & its corresponding rectangle to the window then update window

	1.4 Settings Class
		1.4.1 initialise settings class
		1.4.2 initialise necessary values for settings class
		1.4.3 create a procedure called init to get the settings values from the settings file and set them to variables that can be used
		1.4.4 create a procedure called WriteSettings that writes settings to the settings file and reinitialises the variables stored
		1.4.5 create a procedure called ChangeSettings which takes in 2 bools to change the settings values to these new values, then writes them to the settings file
		1.4.5 create a function called ReturnStates that returns the setting states

	1.5 Grid Class
		1.5.1 initialise Grid class
		1.5.2 initialise necessary values for grid class
		1.5.3 create a procedure called DrawGrid that creates a 2D grid of white lines onto the window using rectangles, assigning each to a combined sprite group

	1.6 GridRect Class
		1.6.1 initialise GridRect class
		1.6.2 initialise necessary values for gridrect class
		1.6.3 create a procedure called drawRect that draws that specific rectangle to the window

2. Solo Files

	2.1 Main
		2.1.1 if main file
		2.1.2 		call printd from ClrTerminal with value 'Loading Netris...'
		2.1.3		call run procedure from home.py

	2.2 Home

		2.2.1 import necessary classes from src.classes
		2.2.2 import pygame library
		2.2.3 import rest of procedures
		2.2.4 
		2.2.5 initialise pygame
		2.2.6 initialise game clock & settings
		2.2.7 initialise list of GUI objects to be drawn on screen
		2.2.8
		2.2.9 create procedure called run
		2.2.10 		initialise settings
		2.2.11		create new window with necessary values
		2.2.12 		draw list of GUI objects onto new window
		2.2.13 		check for hovering on all buttons
		2.2.14 		handle user input
		2.2.15		update display
		2.2.16  	limit fps to 30

	2.3 Instructions

		2.3.1 import necessary classes from src.classes
		2.3.2 import pygame library
		2.3.3 import rest of libraries used
		2.3.4
		2.3.5 initialise pygame
		2.3.6 initialise game clock & settings
		2.3.7
		2.3.8 initialise list of gui objects to be drawn on window
		2.3.9 create procedure called Leave that runs the run procedure in home.py
		2.3.10 create procedure called InstructionsRun
		2.3.11		create new window
		2.3.12		draw gui objects onto new window
		2.3.13		initialise settings values
		2.3.14		check for button hovering
		2.3.15		handle user input
		2.3.16		update window
		2.3.17		limit fps to 30

	2.4 Settings

		2.4.1 import necessary classes from src.classes
		2.4.2 import pygame library
		2.4.3 import rest of libraries
		2.4.4
		2.4.5 initialise pygame
		2.4.6 initialise game clock & settings
		2.4.7 
		2.4.8 initialise gui objects to be drawn onto window
		2.4.9 
		2.4.10 create procedure called Leave that calls the procedure called run from home.py
		2.4.11 create procedure called ChangeMusicState that changes text of music button depending on settings music value
		2.4.12 create procedure called ChangeEffectsState that changes text of sound effect button depending on settings sound effect value
		2.4.13
		2.4.14 create procedure called OnRun that initialises settings values & runs both ChangeMusicState & ChangeEffectsState on both buttons
		2.4.15 
		2.4.16 create procedure called SettingsRun
		2.4.17		creates new window
		2.4.18		draws gui objects onto new window
		2.4.19		calls OnRun procedure
		2.4.20		checks for hovering on all buttons
		2.4.21		changes audio depending on settings values
		2.4.22 		handle user input
		2.4.23 		update window
		2.4.24		limit fps to 30

3. Utilities

	3.1 ClrTerminal
		3.1.1 initialise Color class
		3.1.2 set all constant color values to an ascii code
		3.1.3 create a procedure called ClrPrint that prints out into the terminal with a specified color
		3.1.4 create a procedure called printd that prints out orange text into the terminal
		3.1.5 create a procedure called printe that prints out red text into the terminal
		3.1.6 create a procedure called prints that prints out red text into the terminal 